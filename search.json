[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Въведение в линейната оптимизация",
    "section": "",
    "text": "Setup",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "index.html#git",
    "href": "index.html#git",
    "title": "Въведение в линейната оптимизация",
    "section": "Git",
    "text": "Git\nGit е система за управление на версии, която се използва широко в софтуерната индустрия. Можете да използвате Git, за да свалите материалите за курса от GitHub хранилището\nhttps://github.com/febse/econ2025/\nМожете да инсталирате Git от https://git-scm.com/downloads. Изберете версията, която отговаря на операционната ви система и следвайте инструкциите. Оставете настройките по подразбиране, освен ако не знаете какво точно искате да направите.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "index.html#visual-studio-code",
    "href": "index.html#visual-studio-code",
    "title": "Въведение в линейната оптимизация",
    "section": "Visual Studio Code",
    "text": "Visual Studio Code\nЕдна от възможностите за работа с Python е Visual Studio Code (VSC), безплатна интегрирана среда за разработка (IDE) от Microsoft с множество разширения за различни езици и технологии. Можете да инсталирате VSC от https://code.visualstudio.com/. Изберете версията, която отговаря на операционната ви система и следвайте инструкциите.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "index.html#клониране-на-хранилището-на-курса",
    "href": "index.html#клониране-на-хранилището-на-курса",
    "title": "Въведение в линейната оптимизация",
    "section": "Клониране на хранилището на курса",
    "text": "Клониране на хранилището на курса\nОтворете VSC и натиснете Ctrl+Shift+P. Търсете “Git: Clone” и натиснете Enter. Въведете URL адреса на хранилището на курса:\nhttps://github.com/febse/econ2025.git\nИзберете директория на вашия компютър, където искате да запазите хранилището. VSC ще свали хранилището и ще ви попита дали искате да го отворите. Натиснете “Open”.\nИзчакайте малко, докато VSC отвори хранилището. Трябва да видите структура от файлове и директории, която представлява съдържанието на хранилището. При първото отваряне на хранилището, VSC ще ви попита дали искате да инсталирате препоръчителните разширения. Натиснете “Install All”.\nСлед инсталацията трябва да видите следните разширения:\n\nms-python.autopep8\nms-python.python\nms-python.debugpy\nms-vscode-remote.remote-containers\nms-toolsai.jupyter\ngithub.codespaces\ngithub.copilot\n\nНатиснете Ctrl+Shift+X, което ще отвори списъка с разширения. Проверете дали всички разширения са инсталирани. Ако не са, копирайте идентификаторите (например ms-python.autopep8) на липсващите разширения от списъка (горе), намерете разширенията в изгледа на разширенията и ги инсталирайте ръчно.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "index.html#python",
    "href": "index.html#python",
    "title": "Въведение в линейната оптимизация",
    "section": "Python",
    "text": "Python\nPython е един от най-използваните езици за програмиране, особено в областта на анализ на данни, машинното обучение и изкуствен интелект. Python е лесен за учене и има голяма общност, която е разработила много библиотеки и рамки. Има много начини да инсталирате Python на вашия компютър. За целите на този курс, ние ще използваме Python 3.11 и Miniconda.\n\nСвалете инсталационния пакет на Miniconda от https://docs.conda.io/en/latest/miniconda.html за вашата операционна система.\nСтартирайте инсталационния пакет и следвайте инструкциите. Оставете настройките по подразбиране, освен ако не знаете какво точно искате да направите.\nИнсталирайте Miniconda в директория без интервали и само с ASCII символи в пътя (т.е. без кирилица, без умлаути и т.н.), например C:\\Miniconda3 или C:\\Users\\boyko\\Miniconda3.\nСлед като инсталацията приключи, отворете VSC и натиснете Ctrl+Shift+P. Търсете “Python: Create environment” и натиснете Enter.\nИзберете “Conda”\nИзберете версия на Python: Python-3.11\nТова ще създаде директория .conda в директорията на хранилището на курса и ще инсталира Python 3.11 в нея, заедно с библиотеките, дефинирани в environment.yml.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "02-Introduction/index.html",
    "href": "02-Introduction/index.html",
    "title": "1  Въведение",
    "section": "",
    "text": "1.1 Игра на бурито\nhttps://www.gurobi.com/burrito-optimization-game/",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "02-Introduction/index.html#берлинският-въздушен-мост",
    "href": "02-Introduction/index.html#берлинският-въздушен-мост",
    "title": "1  Въведение",
    "section": "1.2 Берлинският въздушен мост",
    "text": "1.2 Берлинският въздушен мост\nСлед края на Втората световна война Германия е разделена на четири окупационни зони: Американска, Британска, Френска и Съветска. Берлин също така е разделен на четири зони, но достъпът до него по суша и по вода минава изцяло през територията на Съветската окупационна зона.\n\n\n\nОкупационни зони в Германия след Втората световна война. Източник: Wikipedia.\n\n\nНа 24-ти юни 1948 Съветският Съюз блокира достъпа до Западен Берлин, с което започва една от най-значимите конфронтации по време на Студената война. Без достъп по суша или вода, западните съюзници започват да снабдяват града по въздух (Берлински въздушен мост).\n\n\n\nРазтоварване на сол (река Хавел). Източник: Wikipedia.\n\n\n\n\n\nПриземяване на C-54 (Летище Темпелхоф). Източник: Wikipedia.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "02-Introduction/index.html#описание-на-проблема",
    "href": "02-Introduction/index.html#описание-на-проблема",
    "title": "1  Въведение",
    "section": "1.3 Описание на проблема",
    "text": "1.3 Описание на проблема\nЗа по-просто нека да приемем, че доставките до Берлин се извършват с два вида самолети: американски, които могат да поемат до 30 000 кубични фута товар (\\approx 849 m^3), и британски самолети с капацитет до 20 000 кубични фута (\\approx 566 m^3).\nПоради ограничения в инфраструктурата на ден могат да летят най-много 48 самолета (независимо от кой вид).\nЗа всеки полет на американски самолет има нужда от 16 души персонал, двойно повече от броя нужен за британските самолети. Общо на разположение са 512 души на ден.\nРазходите за гориво и поддръжка на самолетите възлизат на 9000 долара за полет на американски самолет и на 5000 долара за полет на британски самолет. Поради бюджетни ограничения общите разходи не могат да надхвърлят 300 000 долара.\nКолко британски и колко американски самолети да използва на ден въздушният мост, така че да достави до Берлин възможно най-голямо количество стоки?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "02-Introduction/index.html#математически-модел",
    "href": "02-Introduction/index.html#математически-модел",
    "title": "1  Въведение",
    "section": "1.4 Математически модел",
    "text": "1.4 Математически модел\n\n\n\n\n\n\nИзбор на променливи\n\n\n\n\n\n\n\\begin{align*}\n& x_1: \\text{ брой американски самолети}\\\\\n& x_2: \\text{ брой британски самолети}\n\\end{align*}\n\n\n\n\n\n\n\n\n\n\nЦелева функция\n\n\n\n\n\nОбщ товар, който x_1 американски самолети и x_2 британски самолети могат да доставят:\n\nz(x_1, x_2) = 3 x_1 + 2 x_2\n\n\n\n\n\n\n\n\n\n\nОграничения\n\n\n\n\n\n\n\\begin{align*}\n& x_1 + x_2 \\leq 48 & \\text{ (инфраструктура)} \\\\\n& 16 x_1 + 8 x_2 \\leq 512 & \\text{ (персонал)} \\\\\n& 9 x_1 + 5 x_2 \\leq 300 & \\text{ (бюджет)} \\\\\n& x_1  \\geq 0 & \\text{ (брой американски самолети)} \\\\\n& x_2 \\geq 0 & \\text{ (брой британски самолети)}\n\\end{align*}\n\n\n\n\n\n\n\n\n\n\nЦялата задача\n\n\n\n\n\n\n\\begin{align*}\n& \\max z(x_1, x_2) = 3 x_1 + 2 x_2 \\\\\n& \\text{при условията:} \\\\\n& x_1 + x_2 \\leq 48 \\\\\n& 16 x_1 + 8 x_2 \\leq 512 \\\\\n& 9 x_1 + 5 x_2 \\leq 300 \\\\\n& x_1  \\geq 0 \\\\\n& x_2 \\geq 0\n\\end{align*}\n\n\n\n\nПреди да решим задачата, нека да я решим неформално в опростен вариант, като игнорираме второто и третото ограничение:\n\n\\begin{align*}\n\\max 3 x_1 + 2 x_2 \\\\\nx_1 + x_2 \\leq 48 \\\\\nx_1 \\geq 0 \\\\\nx_2 \\geq 0\n\\end{align*}\n\nРешение:\n\n(x^*_1 = 48, x^*_2 = 0)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "02-Introduction/index.html#допустимо-множество",
    "href": "02-Introduction/index.html#допустимо-множество",
    "title": "1  Въведение",
    "section": "1.5 Допустимо множество",
    "text": "1.5 Допустимо множество\nЗа да решим задачата (и с трите ограничения) първо ще представим допустимото множество графично, като за целта ще начертаем правите към всяко от петте ограничения (включително ограниченията за неотрицателност). За да можем да начертаем правите са ни нужни по две точки от всяка права. Най-лесно можем да намерим пресечните им точки с двете оси (x_1 и x_2).\nЗа всички точки на оста x_2 е изпълнено, че x_1 = 0. Когато заместим с x_1 = 0 в уравнението на всяка от правите ще намерим пресечните им точки с оста x_2. За всички точки от оста x_1 важи, че x_2 = 0, така че когато заместим с x_2 = 0 в уравненията на правите ще получим пресечните им точки с оста x_1.\nПрава на първото ограничение (инфраструктура):\n\nx_1 + x_2 = 48\n\nЗа да намерим пресечните точки на правата (инфраструктура) с двете оси:\n\nПри x_1 = 0 на колко е равно x_2? 0 + x_2 = 48\nПри x_2 = 0 на колко е равно x_1? x_1 + 0 = 48\n\nЗа да намерим пресечните точки на втората права (персонал) с двете оси:\n\n16 x_1 + 8 x_2 = 512\n\n\nПри x_1 = 0 на колко е равно x_2? 16 \\cdot 0 + 8x_2 = 512 \\implies x_2 = 512 / 8 = 64\nПри x_2 = 0 на колко е равно x_1? 16 x_1 +8 \\cdot 0 = 512 \\implies x_1 = 512 / 16 = 32\n\nПо същия начин можем да намерим и две точки от правата на третото ограничение (бюджет): (0, 300 / 5) и (300 / 9, 0).\n\n\nПокажи\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\nax.plot([0, 48], [48, 0], label=r'$x_1 + x_2 = 48 \\quad Инфрасруктура$')\nax.plot([0, 32], [64, 0], label=r'$16 x_1 + 8 x_2 = 512\\quad Персонал$')\nax.plot([0, 33.33], [60, 0], label=r'$9 x_1 + 5 x_2 = 300 \\quad Бюджет$')\n\nax.legend(loc=0)\n\n\n/tmp/ipykernel_263192/1610056778.py:10: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n  fig.show()\n\n\n\n\n\n\n\n\n\n\n\nПокажи\nimport polytope as pc\nimport numpy as np\n\nA = np.array([[1, 1], [16, 8], [9, 5], [-1, 0], [0, -1]])\nb = np.array([48, 512, 300, 0, 0])\n\nP = pc.Polytope(A, b)\nP_extr = pc.extreme(P)\n\nP_extr\n\n\n`polytope` failed to import `cvxopt.glpk`.\nwill use `scipy.optimize.linprog`\n\n\narray([[32., -0.],\n       [20., 24.],\n       [15., 33.],\n       [-0., 48.],\n       [-0., -0.]])\n\n\nДопустимото множество се състои от всички точки в полигона (0, 0), (32, 0), (20, 24), (15, 33), (0, 48). Изчислението на пресечните точки (20, 24) и (15, 33).\n\n\nПокажи\nfrom matplotlib import pyplot as plt\n\nplt.plot(P_extr[:, 0], P_extr[:, 1], '-o')\n\nfor i, p in enumerate(P_extr):\n    plt.text(p[0], p[1], f\"({p[0]:0.1f}, {p[1]:0.1f})\")\n\n\n\n\n\n\n\n\n\n\n\nПокажи\ndef z(x1, x2):\n    return 3 * x1 + 2 * x2\n\n# (0, 0)\nprint(\"z(0, 0) = \", z(0, 0))\n\n# (32, 0)\nprint(\"z(32, 0) = \", z(32, 0))\n\n# (20, 24)\nprint(\"z(20, 24) = \", z(20, 24))\n\n# (15, 33)\nprint(\"z(15, 33) = \", z(15, 33))\n\n# (0, 48)\nprint(\"z(0, 48) = \", z(0, 48))\n\n\nz(0, 0) =  0\nz(32, 0) =  96\nz(20, 24) =  108\nz(15, 33) =  111\nz(0, 48) =  96\n\n\nОптималната комбинация от американски и британски самолети е (x^*_1 = 15, x^*_2 = 33). Това е възможно най-големият товар, който могат да пренесат самолетите при дадените ограничения. Този товар е равен на $30000 x^*_{1} + 20000 x^*_{2} = 30000 \\cdot 15 + 20000 \\cdot 33 = 1 110 000 кубични фута, използвайки 15 американски и 33 британски самолета.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "02-Introduction/index.html#проблем-с-настоящия-подход",
    "href": "02-Introduction/index.html#проблем-с-настоящия-подход",
    "title": "1  Въведение",
    "section": "1.6 Проблем с настоящия подход",
    "text": "1.6 Проблем с настоящия подход\nВ момента решихме задачата, като изчислихме върховете на допустимото множество и пресметнахме целевата функция във всеки от тях. Решението на максимизационната задача беше върхът с най-висока стойност на целевата функция.\nЗа съжаление този подход е приложим само за много малки задачи и няма практическа стойност. Причината за това е, че броят на върховете на допустимото множество нараства много бързо с увеличаване на броя на ограниченията и променливите. Горна граница за броя на върховете на допустимото множество е дадена от биномния коефициент:\n\n\\binom{n}{k} = \\frac{n!}{k!(n-k)!}\n\nкъдето n е броят на променливите, а k е броят на ограниченията. Можем да пресметнем горната граница за броя на върховете на допустимото за различни комбинации на n и k:\n\n\nПокажи\nfrom scipy.special import comb\n\nprint(\"n = 20, k = 15, Максимален брой върхове = \", comb(20, 15))\nprint(\"n = 40, k = 25, Максимален брой върхове = \", comb(40, 25))\nprint(\"n = 50, k = 25, Максимален брой върхове = \", comb(50, 25))\n\n\nn = 20, k = 15, Максимален брой върхове =  15504.0\nn = 40, k = 25, Максимален брой върхове =  40225345056.0\nn = 50, k = 25, Максимален брой върхове =  126410606437752.05\n\n\nИзчисляването на целевата функция за всички върхове е непостижимо дори за модерни компютри. Ако приемем, че компютърът може да обработи 1 милиард върха на секунда, за 80 променливи и 40 ограничения ще му трябва много време:\n\n\nПокажи\ncomb_n = comb(80, 45)\nprint(round(comb_n / (1e9 * 60 * 60 * 24 * 365), 1), \"години\")\n\n\n1836016.6 години",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "02-Introduction/index.html#решение-на-модела-в-excel",
    "href": "02-Introduction/index.html#решение-на-модела-в-excel",
    "title": "1  Въведение",
    "section": "1.7 Решение на модела в Excel",
    "text": "1.7 Решение на модела в Excel\nРешение на модела в Excel",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "02-Introduction/index.html#решение-на-модела-с-gurobipy",
    "href": "02-Introduction/index.html#решение-на-модела-с-gurobipy",
    "title": "1  Въведение",
    "section": "1.8 Решение на модела с gurobipy",
    "text": "1.8 Решение на модела с gurobipy\n\n\nПокажи\nimport gurobipy as gp\nfrom gurobipy import GRB\nimport pandas as pd\n\n# Съставяне на нов модел\n\nm = gp.Model(\"Berlin Airlift\")\nm.Params.LogToConsole = 0\n\nx1 = m.addVar(vtype=GRB.INTEGER, lb = 0, name=\"американски самолети\")\nx2 = m.addVar(vtype=GRB.INTEGER, lb = 0, name=\"британски самолети\")\n\n# Целева функция\n\nm.setObjective(3 * x1 + 2 * x2, GRB.MAXIMIZE)\n\n# Добавяне на ограниченията\n\nm.addConstr(x1 + x2 &lt;= 48, \"Infrastructure\")\nm.addConstr(16 * x1 + 8 * x2 &lt;= 512, \"Staff\")\nm.addConstr(9 * x1 + 5 * x2 &lt;= 300, \"Budget\")\n\n# Неотрицателността на променливите е автоматично дефинирана в m.addVar\n\n# Решаване на модела\nm.optimize()\n\nprint(\"Максимален обем: \", 1e4 * m.objVal, \"кубични фута\")\n\nprint(\"Използвайки комбинация от:\")\n\n# Отпечатване на резултата\nfor v in m.getVars():\n    print(f\"{v.varName}: {v.x}\")\n\n\nМаксимален обем:  1110000.0 кубични фута\nИзползвайки комбинация от:\nамерикански самолети: 15.0\nбритански самолети: 33.0",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "Literature.html",
    "href": "Literature.html",
    "title": "Литература",
    "section": "",
    "text": "Taha (2017)\nWilliams (2013)\n\n\n\n\n\nTaha, Hamdy A. 2017. Operations Research. 10th ed. Harlow, United Kingdom: Pearson Education Limited.\n\n\nWilliams, Hilary P. 2013. Model Building in Mathematical Programming. Fifth Edition. Chichester: John Wiley & Sons Ltd.",
    "crumbs": [
      "Литература"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Библиография",
    "section": "",
    "text": "Taha, Hamdy A. 2017. Operations Research. 10th ed.\nHarlow, United Kingdom: Pearson Education\nLimited.\n\n\nWilliams, Hilary P. 2013. Model Building in Mathematical\nProgramming. Fifth Edition. Chichester: John\nWiley & Sons Ltd.",
    "crumbs": [
      "Библиография"
    ]
  }
]