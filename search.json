[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Въведение в математическата оптимизация",
    "section": "",
    "text": "Setup",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "index.html#git",
    "href": "index.html#git",
    "title": "Въведение в математическата оптимизация",
    "section": "Git",
    "text": "Git\nGit е система за управление на версии, която се използва широко в софтуерната индустрия. Можете да използвате Git, за да свалите материалите за курса от GitHub хранилището\nhttps://github.com/febse/opt2024\nМожете да инсталирате Git от https://git-scm.com/downloads. Изберете версията, която отговаря на операционната ви система и следвайте инструкциите. Оставете настройките по подразбиране, освен ако не знаете какво точно искате да направите.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "index.html#visual-studio-code",
    "href": "index.html#visual-studio-code",
    "title": "Въведение в математическата оптимизация",
    "section": "Visual Studio Code",
    "text": "Visual Studio Code\nЕдна от възможностите за работа с Python е Visual Studio Code (VSC), безплатна интегрирана среда за разработка (IDE) от Microsoft с множество разширения за различни езици и технологии. Можете да инсталирате VSC от https://code.visualstudio.com/. Изберете версията, която отговаря на операционната ви система и следвайте инструкциите.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "index.html#клониране-на-хранилището-на-курса",
    "href": "index.html#клониране-на-хранилището-на-курса",
    "title": "Въведение в математическата оптимизация",
    "section": "Клониране на хранилището на курса",
    "text": "Клониране на хранилището на курса\nОтворете VSC и натиснете Ctrl+Shift+P. Търсете “Git: Clone” и натиснете Enter. Въведете URL адреса на хранилището на курса:\nhttps://github.com/febse/opt2024.git\nИзберете директория на вашия компютър, където искате да запазите хранилището. VSC ще свали хранилището и ще ви попита дали искате да го отворите. Натиснете “Open”.\nИзчакайте малко, докато VSC отвори хранилището. Трябва да видите структура от файлове и директории, която представлява съдържанието на хранилището. При първото отваряне на хранилището, VSC ще ви попита дали искате да инсталирате препоръчителните разширения. Натиснете “Install All”.\nСлед инсталацията трябва да видите следните разширения:\n\nms-python.autopep8\nms-python.python\nms-python.debugpy\nms-vscode-remote.remote-containers\nms-toolsai.jupyter\ngithub.codespaces\ngithub.copilot\n\nНатиснете Ctrl+Shift+X, което ще отвори списъка с разширения. Проверете дали всички разширения са инсталирани. Ако не са, копирайте идентификаторите (например ms-python.autopep8) на липсващите разширения от списъка (горе), намерете разширенията в изгледа на разширенията и ги инсталирайте ръчно.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "index.html#python",
    "href": "index.html#python",
    "title": "Въведение в математическата оптимизация",
    "section": "Python",
    "text": "Python\nPython е един от най-използваните езици за програмиране, особено в областта на анализ на данни, машинното обучение и изкуствен интелект. Python е лесен за учене и има голяма общност, която е разработила много библиотеки и рамки. Има много начини да инсталирате Python на вашия компютър. За целите на този курс, ние ще използваме Python 3.11 и Miniconda.\n\nСвалете инсталационния пакет на Miniconda от https://docs.conda.io/en/latest/miniconda.html за вашата операционна система.\nСтартирайте инсталационния пакет и следвайте инструкциите. Оставете настройките по подразбиране, освен ако не знаете какво точно искате да направите.\nИнсталирайте Miniconda в директория без интервали и само с ASCII символи в пътя (т.е. без кирилица, без умлаути и т.н.), например C:\\Miniconda3 или C:\\Users\\boyko\\Miniconda3.\nСлед като инсталацията приключи, отворете VSC и натиснете Ctrl+Shift+P. Търсете “Python: Create environment” и натиснете Enter.\nИзберете “Conda”\nИзберете версия на Python: Python-3.11\nТова ще създаде директория .conda в директорията на хранилището на курса и ще инсталира Python 3.11 в нея, заедно с библиотеките, дефинирани в environment.yml.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "02-Introduction/index.html",
    "href": "02-Introduction/index.html",
    "title": "1  Въведение",
    "section": "",
    "text": "1.1 Игра на бурито\nhttps://www.gurobi.com/burrito-optimization-game/",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "02-Introduction/index.html#берлинският-въздушен-мост",
    "href": "02-Introduction/index.html#берлинският-въздушен-мост",
    "title": "1  Въведение",
    "section": "1.2 Берлинският въздушен мост",
    "text": "1.2 Берлинският въздушен мост\nСлед края на Втората световна война Германия е разделена на четири окупационни зони: Американска, Британска, Френска и Съветска. Берлин също така е разделен на четири зони, но достъпът до него по суша и по вода минава изцяло през територията на Съветската окупационна зона.\n\n\n\nОкупационни зони в Германия след Втората световна война. Източник: Wikipedia.\n\n\nНа 24-ти юни 1948 Съветският Съюз блокира достъпа до Западен Берлин, с което започва една от най-значимите конфронтации по време на Студената война. Без достъп по суша или вода, западните съюзници започват да снабдяват града по въздух (Берлински въздушен мост).\n\n\n\nРазтоварване на сол (река Хавел). Източник: Wikipedia.\n\n\n\n\n\nПриземяване на C-54 (Летище Темпелхоф). Източник: Wikipedia.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "02-Introduction/index.html#описание-на-проблема",
    "href": "02-Introduction/index.html#описание-на-проблема",
    "title": "1  Въведение",
    "section": "1.3 Описание на проблема",
    "text": "1.3 Описание на проблема\nЗа по-просто нека да приемем, че доставките до Берлин се извършват с два вида самолети: американски, които могат да поемат до 30 000 кубични фута товар (\\approx 849 m^3), и британски самолети с капацитет до 20 000 кубични фута (\\approx 566 m^3).\nПоради ограничения в инфраструктурата на ден могат да летят най-много 48 самолета (независимо от кой вид).\nЗа всеки полет на американски самолет има нужда от 16 души персонал, двойно повече от броя нужен за британските самолети. Общо на разположение са 512 души на ден.\nРазходите за гориво и поддръжка на самолетите възлизат на 9000 долара за полет на американски самолет и на 5000 долара за полет на британски самолет. Поради бюджетни ограничения общите разходи не могат да надхвърлят 300 000 долара.\nКолко британски и колко американски самолети да използва на ден въздушният мост, така че да достави до Берлин възможно най-голямо количество стоки?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "02-Introduction/index.html#математически-модел",
    "href": "02-Introduction/index.html#математически-модел",
    "title": "1  Въведение",
    "section": "1.4 Математически модел",
    "text": "1.4 Математически модел\n\n\n\n\n\n\nИзбор на променливи\n\n\n\n\n\n\n\\begin{align*}\n& x_1: \\text{ брой американски самолети}\\\\\n& x_2: \\text{ брой британски самолети}\n\\end{align*}\n\n\n\n\n\n\n\n\n\n\nЦелева функция\n\n\n\n\n\nОбщ товар, който x_1 американски самолети и x_2 британски самолети могат да доставят:\n\nz(x_1, x_2) = 3 x_1 + 2 x_2\n\n\n\n\n\n\n\n\n\n\nОграничения\n\n\n\n\n\n\n\\begin{align*}\n& x_1 + x_2 \\leq 48 & \\text{ (инфраструктура)} \\\\\n& 16 x_1 + 8 x_2 \\leq 512 & \\text{ (персонал)} \\\\\n& 9 x_1 + 5 x_2 \\leq 300 & \\text{ (бюджет)} \\\\\n& x_1  \\geq 0 & \\text{ (брой американски самолети)} \\\\\n& x_2 \\geq 0 & \\text{ (брой британски самолети)}\n\\end{align*}\n\n\n\n\n\n\n\n\n\n\nЦялата задача\n\n\n\n\n\n\n\\begin{align*}\n& \\max z(x_1, x_2) = 3 x_1 + 2 x_2 \\\\\n& \\text{при условията:} \\\\\n& x_1 + x_2 \\leq 48 \\\\\n& 16 x_1 + 8 x_2 \\leq 512 \\\\\n& 9 x_1 + 5 x_2 \\leq 300 \\\\\n& x_1  \\geq 0 \\\\\n& x_2 \\geq 0\n\\end{align*}\n\n\n\n\nПреди да решим задачата, нека да я решим неформално в опростен вариант, като игнорираме второто и третото ограничение:\n\n\\begin{align*}\n\\max 3 x_1 + 2 x_2 \\\\\nx_1 + x_2 \\leq 48 \\\\\nx_1 \\geq 0 \\\\\nx_2 \\geq 0\n\\end{align*}\n\nРешение:\n\n(x^*_1 = 48, x^*_2 = 0)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "02-Introduction/index.html#допустимо-множество",
    "href": "02-Introduction/index.html#допустимо-множество",
    "title": "1  Въведение",
    "section": "1.5 Допустимо множество",
    "text": "1.5 Допустимо множество\nЗа да решим задачата (и с трите ограничения) първо ще представим допустимото множество графично, като за целта ще начертаем правите към всяко от петте ограничения (включително ограниченията за неотрицателност). За да можем да начертаем правите са ни нужни по две точки от всяка права. Най-лесно можем да намерим пресечните им точки с двете оси (x_1 и x_2).\nЗа всички точки на оста x_2 е изпълнено, че x_1 = 0. Когато заместим с x_1 = 0 в уравнението на всяка от правите ще намерим пресечните им точки с оста x_2. За всички точки от оста x_1 важи, че x_2 = 0, така че когато заместим с x_2 = 0 в уравненията на правите ще получим пресечните им точки с оста x_1.\nПрава на първото ограничение (инфраструктура):\n\nx_1 + x_2 = 48\n\nЗа да намерим пресечните точки на правата (инфраструктура) с двете оси:\n\nПри x_1 = 0 на колко е равно x_2? 0 + x_2 = 48\nПри x_2 = 0 на колко е равно x_1? x_1 + 0 = 48\n\nЗа да намерим пресечните точки на втората права (персонал) с двете оси:\n\n16 x_1 + 8 x_2 = 512\n\n\nПри x_1 = 0 на колко е равно x_2? 16 \\cdot 0 + 8x_2 = 512 \\implies x_2 = 512 / 8 = 64\nПри x_2 = 0 на колко е равно x_1? 16 x_1 +8 \\cdot 0 = 512 \\implies x_1 = 512 / 16 = 32\n\nПо същия начин можем да намерим и две точки от правата на третото ограничение (бюджет): (0, 300 / 5) и (300 / 9, 0).\n\n\nПокажи\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\nax.plot([0, 48], [48, 0], label=r'$x_1 + x_2 = 48 \\quad Инфрасруктура$')\nax.plot([0, 32], [64, 0], label=r'$16 x_1 + 8 x_2 = 512\\quad Персонал$')\nax.plot([0, 33.33], [60, 0], label=r'$9 x_1 + 5 x_2 = 300 \\quad Бюджет$')\n\nax.legend(loc=0)\n\n\n/tmp/ipykernel_263192/1610056778.py:10: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n  fig.show()\n\n\n\n\n\n\n\n\n\n\n\nПокажи\nimport polytope as pc\nimport numpy as np\n\nA = np.array([[1, 1], [16, 8], [9, 5], [-1, 0], [0, -1]])\nb = np.array([48, 512, 300, 0, 0])\n\nP = pc.Polytope(A, b)\nP_extr = pc.extreme(P)\n\nP_extr\n\n\n`polytope` failed to import `cvxopt.glpk`.\nwill use `scipy.optimize.linprog`\n\n\narray([[32., -0.],\n       [20., 24.],\n       [15., 33.],\n       [-0., 48.],\n       [-0., -0.]])\n\n\nДопустимото множество се състои от всички точки в полигона (0, 0), (32, 0), (20, 24), (15, 33), (0, 48). Изчислението на пресечните точки (20, 24) и (15, 33).\n\n\nПокажи\nfrom matplotlib import pyplot as plt\n\nplt.plot(P_extr[:, 0], P_extr[:, 1], '-o')\n\nfor i, p in enumerate(P_extr):\n    plt.text(p[0], p[1], f\"({p[0]:0.1f}, {p[1]:0.1f})\")\n\n\n\n\n\n\n\n\n\n\n\nПокажи\ndef z(x1, x2):\n    return 3 * x1 + 2 * x2\n\n# (0, 0)\nprint(\"z(0, 0) = \", z(0, 0))\n\n# (32, 0)\nprint(\"z(32, 0) = \", z(32, 0))\n\n# (20, 24)\nprint(\"z(20, 24) = \", z(20, 24))\n\n# (15, 33)\nprint(\"z(15, 33) = \", z(15, 33))\n\n# (0, 48)\nprint(\"z(0, 48) = \", z(0, 48))\n\n\nz(0, 0) =  0\nz(32, 0) =  96\nz(20, 24) =  108\nz(15, 33) =  111\nz(0, 48) =  96\n\n\nОптималната комбинация от американски и британски самолети е (x^*_1 = 15, x^*_2 = 33). Това е възможно най-големият товар, който могат да пренесат самолетите при дадените ограничения. Този товар е равен на $30000 x^*_{1} + 20000 x^*_{2} = 30000 \\cdot 15 + 20000 \\cdot 33 = 1 110 000 кубични фута, използвайки 15 американски и 33 британски самолета.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "02-Introduction/index.html#проблем-с-настоящия-подход",
    "href": "02-Introduction/index.html#проблем-с-настоящия-подход",
    "title": "1  Въведение",
    "section": "1.6 Проблем с настоящия подход",
    "text": "1.6 Проблем с настоящия подход\nВ момента решихме задачата, като изчислихме върховете на допустимото множество и пресметнахме целевата функция във всеки от тях. Решението на максимизационната задача беше върхът с най-висока стойност на целевата функция.\nЗа съжаление този подход е приложим само за много малки задачи и няма практическа стойност. Причината за това е, че броят на върховете на допустимото множество нараства много бързо с увеличаване на броя на ограниченията и променливите. Горна граница за броя на върховете на допустимото множество е дадена от биномния коефициент:\n\n\\binom{n}{k} = \\frac{n!}{k!(n-k)!}\n\nкъдето n е броят на променливите, а k е броят на ограниченията. Можем да пресметнем горната граница за броя на върховете на допустимото за различни комбинации на n и k:\n\n\nПокажи\nfrom scipy.special import comb\n\nprint(\"n = 20, k = 15, Максимален брой върхове = \", comb(20, 15))\nprint(\"n = 40, k = 25, Максимален брой върхове = \", comb(40, 25))\nprint(\"n = 50, k = 25, Максимален брой върхове = \", comb(50, 25))\n\n\nn = 20, k = 15, Максимален брой върхове =  15504.0\nn = 40, k = 25, Максимален брой върхове =  40225345056.0\nn = 50, k = 25, Максимален брой върхове =  126410606437752.05\n\n\nИзчисляването на целевата функция за всички върхове е непостижимо дори за модерни компютри. Ако приемем, че компютърът може да обработи 1 милиард върха на секунда, за 80 променливи и 40 ограничения ще му трябва много време:\n\n\nПокажи\ncomb_n = comb(80, 45)\nprint(round(comb_n / (1e9 * 60 * 60 * 24 * 365), 1), \"години\")\n\n\n1836016.6 години",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "02-Introduction/index.html#решение-на-модела-в-excel",
    "href": "02-Introduction/index.html#решение-на-модела-в-excel",
    "title": "1  Въведение",
    "section": "1.7 Решение на модела в Excel",
    "text": "1.7 Решение на модела в Excel\nРешение на модела в Excel",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "02-Introduction/index.html#решение-на-модела-с-gurobipy",
    "href": "02-Introduction/index.html#решение-на-модела-с-gurobipy",
    "title": "1  Въведение",
    "section": "1.8 Решение на модела с gurobipy",
    "text": "1.8 Решение на модела с gurobipy\n\n\nПокажи\nimport gurobipy as gp\nfrom gurobipy import GRB\nimport pandas as pd\n\n# Съставяне на нов модел\n\nm = gp.Model(\"Berlin Airlift\")\nm.Params.LogToConsole = 0\n\nx1 = m.addVar(vtype=GRB.INTEGER, lb = 0, name=\"американски самолети\")\nx2 = m.addVar(vtype=GRB.INTEGER, lb = 0, name=\"британски самолети\")\n\n# Целева функция\n\nm.setObjective(3 * x1 + 2 * x2, GRB.MAXIMIZE)\n\n# Добавяне на ограниченията\n\nm.addConstr(x1 + x2 &lt;= 48, \"Infrastructure\")\nm.addConstr(16 * x1 + 8 * x2 &lt;= 512, \"Staff\")\nm.addConstr(9 * x1 + 5 * x2 &lt;= 300, \"Budget\")\n\n# Неотрицателността на променливите е автоматично дефинирана в m.addVar\n\n# Решаване на модела\nm.optimize()\n\nprint(\"Максимален обем: \", 1e4 * m.objVal, \"кубични фута\")\n\nprint(\"Използвайки комбинация от:\")\n\n# Отпечатване на резултата\nfor v in m.getVars():\n    print(f\"{v.varName}: {v.x}\")\n\n\nМаксимален обем:  1110000.0 кубични фута\nИзползвайки комбинация от:\nамерикански самолети: 15.0\nбритански самолети: 33.0",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "03-Graphical-Method/01-Blending.html",
    "href": "03-Graphical-Method/01-Blending.html",
    "title": "2  Графичен метод",
    "section": "",
    "text": "2.1 Задача: планиране на производство\nБутиково кафене в София предлага два продукта: Супер еспресо и Делукс еспресо. За приготвянето на един килограм от първия вид еспресо са необходими по равни части арабика и робуста, а рецептата за Делукс предвижда смес от арабика и робуста в пропорция 1 към 3. Доставчиците са готови да осигурят 120 кг арабика и 160 кг. робуста. Заведението знае, че няма да може да продаде повече от 150 кг. Делукс еспресо. От всеки продаден килограм Супер еспресо заведението печели 40 лв., докато печалбата от килограм Делукс възлиза на 50 лв.\nКолко от двата типа кафе ще препоръчате на кафенето да смеси?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Графичен метод</span>"
    ]
  },
  {
    "objectID": "03-Graphical-Method/01-Blending.html#задача-планиране-на-производство",
    "href": "03-Graphical-Method/01-Blending.html#задача-планиране-на-производство",
    "title": "2  Графичен метод",
    "section": "",
    "text": "Математически модел\n\n\n\n\n\nЦелеви променливи:\n\n\\begin{align*}\n& x_1: \\text{ Супер еспресо (кг.)}\\\\\n& x_2: \\text{ Делукс еспресо (кг.)}\n\\end{align*}\n\n\n\\max z = 40 x_1 + 50 x_2 \\text{ (целева функция)}\n\n\n\\begin{align*}\n0.5 x_1 + 0.25 x_2 & \\leq 120 \\text{ (арабика)}\\\\\n0.5 x_1 + 0.75 x_2 & \\leq 160 \\text{ (робуста)} \\\\\n0 \\cdot x_1 + x_2 & \\leq 150 \\text{ (търсене Делукс)}\\\\\nx_1 & \\geq 0 \\\\\nx_2 & \\geq 0\n\\end{align*}",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Графичен метод</span>"
    ]
  },
  {
    "objectID": "03-Graphical-Method/01-Blending.html#допустимо-множество",
    "href": "03-Graphical-Method/01-Blending.html#допустимо-множество",
    "title": "2  Графичен метод",
    "section": "2.2 Допустимо множество",
    "text": "2.2 Допустимо множество\nКакто и в предишната задача ще изобразим графично допустимото множество, като начертаем правите, към всяко от петте неравенства:\n\n\\begin{align}\n0.5 x_1 & + 0.25 x_2 & = & 120 \\\\\n0.5 x_1 & + 0.75 x_2 & = & 160 \\\\\n0 \\cdot x_1 & + x_2 & = & 150\n\\end{align}\n\nПърво ще пресметнем пресечните точки на трите прави с осите x_1 и x_2?\n\nПрава арабика: (0, 120 / 0.25 = 480), (120 / 0.5 = 240, 0)\nПрава робуста: (0, 160 / 0.75), (160 / 0.5, 0)\nПрава търсене на Делукс: (0, 150), (100, 150) Тази права е успоредна на оста x_1.\n\n\n\nПокажи\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom IPython.display import display\n\nfig, ax = plt.subplots()\n\nax.plot([0, 240], [480, 0], label=r\"$0.5 x_1 + 0.25 x_2 = 120$ (арабика)\")\nax.plot([0, 320], [213.33, 0], label=r\"$0.5 x_1 + 0.75 x_2 = 160$ (робуста)\")\nax.plot([0, 400], [150, 150], label=r\"$x_2 = 150$ (търсене на Делукс)\")\n\nax.set_xlim((0, 400))\nax.set_ylim((0, 500))\nax.set_xlabel(r'$x_1$ (Супер, кг.)')\nax.set_ylabel(r'$x_2$ (Делукс, кг.)')\nax.legend(loc=0)\n\n\n\n\n\n\n\n\nФигура 2.1: Прави на трите ограничения\n\n\n\n\n\nДопустимото множество е определено от всички точки, които едновременно изпълняват всички ограничения. На Фигура 2.1 това е полигонът определен от\n\nПресечната точка на равенствата на двете ограничения за неотрицателност: (0, 0)\nПресечната точка на неотрицателността на “Супер еспресо” (оста x_1) и “арабика”: (240, 0).\nПресечната точка на равенствата на ограниченията “арабика” и “робуста”\nПресечната точка на равенствата на ограниченията “робуста” и “търсене на Делукс”\nПресечната точка на равенствата на ограниченията “търсене на Делукс” и неотрицателността на Делукс (оста x_2). Вече пресметнахме тази точка, когато чертахме правите към ограниченията: (0, 150).\n\nВ пресечната точка на правите към “робуста”/“арабика” са изпълнени и двете равенства едновременно. За да намерим точката трябва да решим система от двете уравнения\n\n\\begin{align}\n0.5 x_1 + 0.25 x_2 & = 120 \\text{ (1: арабика)} \\\\\n0.5 x_1 + 0.75 x_2 & = 160 \\text{ (2: робуста)}\n\\end{align}\n\nЕдин начин да решим системата е да извадим първото уравнение от второто уравнение. Когато го направим получаваме\n\n\\begin{align}\n(0.75 - 0.25) x_2 & = 160 - 120 \\\\\n0.5 x_2 & = 40 \\\\\nx_2 & = 80\n\\end{align}\n\nЗаместваме с x_2 = 80 в първото уравнение и получаваме\n\n\\begin{align}\n0.5 x_1 + 0.25 \\cdot 80 & = 120\\\\\nx_1 & = 200.\n\\end{align}\n\nРешението на системата е (200, 80): пресечната точка на двете прави.\nЗа да намерим координатите на пресечната точка на равенствата на “робуста” и “търсене на Делукс” трябва да решим системата от две уравнения принадлежащи към тези ограничения:\n\n\\begin{align}\n0.5x_1 + 0.75 x_2 & = & 160 \\text{ робуста}\\\\\n0 x_1 + x_2 & = & 150 \\text{ търсене на Делукс}\n\\end{align}\n\nРешението на системата можем да получим, като заместим в първото уравнение с x_2 = 150, за да получим\nС това намерихме координатите на пресечната точка между правите на “робуста” и “търсене на Делукс”: (95, 150).\nТака получаваме върховете на допустимото множество: (0, 0), (240, 0), (200, 80), (95, 150), (0, 150) (Фигура 2.2).\n\n\nПокажи\nvertices = [\n    [0, 0],\n    [0, 150],\n    [95, 150],\n    [200, 80],    \n    [240, 0]\n]\n\nvertices_x = [v[0] for v in vertices]\nvertices_y = [v[1] for v in vertices]\n\nfor v in vertices:\n    ax.annotate(\n        f\"({v[0]}, {v[1]})\",\n        (v[0], v[1]),\n        textcoords=\"offset points\",\n        xytext=(0, 5)\n    )\n\nax.fill(vertices_x, vertices_y, color='grey', alpha=0.3)\n\ndisplay(fig)\n\n\n\n\n\n\n\n\nФигура 2.2: Допустимо множество",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Графичен метод</span>"
    ]
  },
  {
    "objectID": "03-Graphical-Method/01-Blending.html#целева-функция-и-оптимален-план",
    "href": "03-Graphical-Method/01-Blending.html#целева-функция-и-оптимален-план",
    "title": "2  Графичен метод",
    "section": "2.3 Целева функция и оптимален план",
    "text": "2.3 Целева функция и оптимален план\nЗа да определим оптималния план графично ще начертаем прави, съответстващи на различни нива на печалба.\nЦелевата функция зависи от две променливи, което означава, че за да я изобразим графично ще трябва да използваме трето измерение. Фигура 2.3 показва графиката на целевата функция в тримерно пространство, както и нейната проекция в двумерно пространство.\n\n\nПокажи\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom mpl_toolkits.mplot3d.art3d import Poly3DCollection\n\n# Create the x, y, and z coordinate arrays\nx, y = np.meshgrid(np.linspace(0, 250, 20), np.linspace(0, 250, 20))\nz = 40 * x + 30 * y\n\n# Create a figure\nfig = plt.figure()\n\nax = fig.add_subplot(111, projection='3d')\n\n# Add a 3D subplot\nax.plot_surface(x, y, z, rstride=5, cstride=5, edgecolor='k', alpha=0.5)\nax.view_init(elev=25, azim=-120)\nax.set_xlabel(r\"$x_1$ (Супер, кг.)\")\nax.set_ylabel(r\"$x_2$ (Делукс, кг.)\")\nax.set_zlabel(r\"$z$ (Печалба, лв.)\")\n\nvertices_3d = [v + [0] for v in vertices]\n\n# Create a Poly3DCollection\npoly = Poly3DCollection([vertices_3d], alpha=.25, linewidths=1, edgecolors='r', facecolors='c')\n\n# Add the Poly3DCollection to the axes\nax.add_collection3d(poly)\n\n\n\n\n\n\n\n\nФигура 2.3: Целева функция\n\n\n\n\n\nГорното изображение е удобно, за да разберем как изглежда целевата функция, но не ни помага да намерим максимума й в рамките на допустимото множество. Затова ще използваме проекцията на целевата функция върху равнината на допустимото множество.\nНека фиксираме няколко (произволни нива на печалба) и да начертаем правите, които ги представляват. Нека тези нива са 5000, 10000 и 12000. За да изобразим тези прави ще трябва да намерим пресечните точки на тези прави с двете оси.\nВсички комбинации x_1 и x_2, за които печалбата (целевата функция) е равна на 5000 лв лежат на права, определена от равенството:\n\n40x_1 + 50x_2 = 5000\n\nВсички комбинации x_1 и x_2, за които печалбата (целевата функция) е равна на 1000 лв. лежат на права, определена от равенството\n\n40x_1 + 50x_2 = 10000\n\nДвете прави са успоредни една спрямо друга, тъй като наклонът на правите зависи от коефициентите на x_1 и x_2 в уравненията и не зависи от константите (5 000 в първото уравнение и 10 000 във второто).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Графичен метод</span>"
    ]
  },
  {
    "objectID": "03-Graphical-Method/01-Blending.html#нормален-вектор",
    "href": "03-Graphical-Method/01-Blending.html#нормален-вектор",
    "title": "2  Графичен метод",
    "section": "2.4 Нормален вектор",
    "text": "2.4 Нормален вектор\nНека фиксираме ниво на печалба от 5000 лв. Всички комбинации от супер и делукс, които постигат точно това ниво на печалба лежат на права, дадена от следното уравнение:\n\n40x_1 + 50x_2 = 5000\n\nТази права се пресича с оста x_1 при x_1 = 125 и с оста x_2 при x_2 = 100. От тези две точки можем да изведем параметричното представяне на правата (за t \\in \\mathbb{R}).\n\n\\begin{pmatrix}\nx_1 \\\\\nx_2\n\\end{pmatrix}\n= \\begin{pmatrix}\n0 \\\\\n100\n\\end{pmatrix}\n+ t \\left[\n\\begin{pmatrix}\n125 \\\\\n0\n\\end{pmatrix}\n-\n\\begin{pmatrix}\n0 \\\\\n100\n\\end{pmatrix}\n\\right]\n\nПресмятаме разликата между двата вектора и получаваме\n\n\\begin{pmatrix}\nx_1 \\\\\nx_2\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n0 \\\\\n100\n\\end{pmatrix}\n+ t\n\\begin{pmatrix}\n125 \\\\\n-100\n\\end{pmatrix}\n\nВторият вектор показва посоката на правата, а векторът от коефициентите пред x_1 и x_2 в първоначалното уравнение е\n\n\\begin{pmatrix}\n40 \\\\\n50\n\\end{pmatrix}\n\nДва вектора са ортогонални (перпендикулярни), ако скаларното им произведение е равно на 0. Скаларното произведение на два вектора е равно на сумата от произведенията на съответните им координати. Така получаваме\n\n\\begin{pmatrix}\n40 \\\\\n50\n\\end{pmatrix}\n\\cdot\n\\begin{pmatrix}\n125 \\\\\n-100\n\\end{pmatrix}\n= 40 \\cdot 125 + 50 \\cdot (-100) = 0\n\n\n\nПокажи\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nA = np.array([0, 100])\nB = np.array([125, 0])\nC = B - A\n\n# Create a figure\nfig, ax = plt.subplots()\n\n# Plot the vectors\nax.quiver(0, 0, A[0], A[1], angles='xy', scale_units='xy', scale=1, color='r', label='A')\nax.quiver(0, 0, B[0], B[1], angles='xy', scale_units='xy', scale=1, color='b', label='B')\nax.quiver(A[0], A[1], C[0], C[1], angles='xy', scale_units='xy', scale=1, color='g', label='B-A')\n\n# Set the limits of the plot\nax.set_xlim([-2, 125])\nax.set_ylim([-2, 125])\n\n# Add a legend\nax.legend(loc=0)\n\n\n\n\n\n\n\n\n\nНека да начертаем тези прави на графиката на допустимото множество. Фигура 2.4 показва графиката на допустимото множество и правите на печалбата от 3000 лв., 50000 лв. и 12000 лв.\n\n\nПокажи\nfig, ax = plt.subplots()\n\nax.fill(vertices_x, vertices_y, color='grey', alpha=0.3)\nfor v in vertices:\n    ax.annotate(\n        f\"({v[0]}, {v[1]})\",\n        (v[0], v[1]),\n        textcoords=\"offset points\",\n        xytext=(0, 5)\n    )\n\nax.plot([0, 3000 / 40], [3000 / 50, 0], label=r'$40 x_1 + 50 x_2 = 3000$')\nax.plot([0, 5000 / 40], [5000 / 50, 0], label=r'$40 x_1 + 50 x_2 = 5000$')\nax.plot([0, 12000 / 40], [12000 / 50, 0], label=r'$40 x_1 + 50 x_2 = 12000$')\n\nax.quiver(0, 0, 40, 50, angles='xy', scale_units='xy', scale=1, color='grey', label='Нормален вектор')\n\nax.set_xlim((0, 260))\nax.set_ylim((0, 260))\n\nax.legend(loc=0)\n\n\n\n\n\n\n\n\nФигура 2.4: Оптимален план\n\n\n\n\n\nВекторът (40, 50) се нарича нормален вектор на правите на функцията на печалба и е перпендикулярен на тях. Координатите на нормалния вектор се получават от коефициентите на x_1 и x_2 в целевата функция.\nПравата на максималната печалба (12 000 лв.) се допира до допустимото множество в точката (x^*_1 = 200, x^*_2 = 80), която е и оптималният план.\nС други думи препоръката ни към кафенето е да произведе 200 кг. супер еспресо и 80 кг. делукс еспресо, за да постигне максимална печалба от 12 000 лв.\nЗа целта ще са му нужни\n\n0.5 \\cdot 200 + 0.25 \\cdot 80 = 120 \\text{ кг. арабика}\n\nи\n\n0.5 \\cdot 200 + 0.75 \\cdot 80 = 160 \\text{ кг. робуста}.\n\nГраницата на търсенето на делукс еспресо е 150 кг., което е по-малко от 80 кг. Това означава, че кафенето ще може да продаде всичко, което произведе.\n\nУпражнение 2.1 (Задача 1) Предприятие произвежда два вида боя: екстериорна (за външни повърхности) и интериорна (за вътрешни помещения). Производството двете бои изисква три суровини: разтворител, багрило и смола. За производство на един тон екстериорна боя са нужни 6 тона разтворител, един тон багрило и 2 тона смола. За производство на един тон интериорна боя са нужни 4 тона разтворител, 2 тона багрило и 7 тона смола. На разположение са следните количества суровини: 24 тона разтворител, 6 тона багрило и 4 тона смола. Колко тона от всяка боя да произведе предприятието, за да постигне максимална печалба? От продажбата на един тон екстериорна боя предприятието печели 5 000 лв., а от продажбата на един тон интериорна боя - 4 000 лв.\n\n\n\nТаблица 2.1: Консумация на материали за производството на интериорна и екстериорна боя и печалба за продаден тон\n\n\n\n\n\n\n\n\n\n\n\n\nЕкстериорна боя\nИнтериорна боя\nДневна наличност на ресурс\n\n\n\n\nРазтворител\n6\n4\n24\n\n\nБагрило\n1\n2\n6\n\n\nСмола\n2\n7\n4\n\n\nПечалба (1 000 лв./тон)\n5\n4\n\n\n\n\n\n\n\nСъставете математически модел, който да намери оптималния план за производство на боите.\n\n\n\n\n\n\n\nМатематически модел\n\n\n\n\n\nЦелеви променливи: \n\\begin{align*}\n& x_1: \\text{ Екстериорна боя (тонове)}\\\\\n& x_2: \\text{ Интериорна боя (тонове)}\n\\end{align*}\n\n\n\\max z = 5 x_1 + 4 x_2 \\text{ (целева функция)}\n\nОграничения:\n\n\\begin{align*}\n6x_1 + 4x_2 & \\leq 24 \\text{ (разтворител)}\\\\\nx_1 + 2x_2 & \\leq 6 \\text{ (багрило)}\\\\\n2x_1 + 7x_2 & \\leq 4 \\text{ (смола)}\\\\\nx_1 & \\geq 0 \\\\\nx_2 & \\geq 0\n\\end{align*}\n\n\n\n\n\n\nПокажи\nimport gurobipy as gp\nfrom gurobipy import GRB\n\n# Create a new model\nm = gp.Model(\"Paint\")\nm.Params.LogToConsole = 0\n\n# Create variables\np_exterior = m.addVar(lb=0, name=\"exterior\")\np_interior = m.addVar(lb=0, name=\"interior\")\n\nm.setObjective(5 * p_exterior + 4 * p_interior, GRB.MAXIMIZE)\n\nm.addConstr(6 * p_exterior + 4 * p_interior &lt;= 24, \"Solvent\")\nm.addConstr(1 * p_exterior + 2 * p_interior &lt;= 6, \"Dye\")\nm.addConstr(2 * p_exterior + 7 * p_interior &lt;= 4, \"Resin\")\n\nm.optimize()\n\nprint(f\"Optimal solution: p_exterior = {p_exterior.x}, p_interior = {p_interior.x}\")\n\n\nRestricted license - for non-production use only - expires 2025-11-24\nOptimal solution: p_exterior = 2.0, p_interior = 0.0",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Графичен метод</span>"
    ]
  },
  {
    "objectID": "03-Graphical-Method/02-Sensitivity.html",
    "href": "03-Graphical-Method/02-Sensitivity.html",
    "title": "3  Анализ на чувствителността на решението",
    "section": "",
    "text": "3.1 Дефицитност на ресурси\nВ оптималния план (x^*_1 = 200, x^*_2 = 80) заведението изразходва:\n\\begin{align*}\n0.5 x^*_1 + 0.25 x^*_2 & = 0.5 \\cdot 200 + 0.25 \\cdot 80 & = 120 \\text{ кг. арабика} \\\\\n0.5 x^*_1 + 0.75x^*_2 & = 0.5 \\cdot 200 + 0.75 \\cdot 80 & = 160 \\text{ кг. робуста} \\\\\n0 \\cdot x^*_1 + x^*_2 & = 0\\cdot 200 + 1\\cdot 80 & = 80 \\text{ кг. търсене Делукс}\n\\end{align*}\nОбщо заведението разполага с 120 кг. арабика, 160 кг. робуста и 150 кг. търсене на Делукс. Тъй като в оптимума се изразходва цялото налично количество от арабика и робуста казваме, че тези ресурси са дефицитни. Кои ресурси са дефицитни може да се види лесно от графиките. В пресечната точка на две прави едновременно са изпълнени и двете уравнения, които ги определят.\nВ оптималния план остават 150 - 80 = 70 кг. неизползвано търсене на Делукс (slack). Казваме, че “търсенето на Делукс” е недефицитен ресурс.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Анализ на чувствителността на решението</span>"
    ]
  },
  {
    "objectID": "03-Graphical-Method/02-Sensitivity.html#дефицитност-на-ресурси",
    "href": "03-Graphical-Method/02-Sensitivity.html#дефицитност-на-ресурси",
    "title": "3  Анализ на чувствителността на решението",
    "section": "",
    "text": "Във всяка точка от правата на ограничението за арабика важи, че изразходваното количество арабика е 120 кг., защото ограничението е изпълнено строго.\nВъв всяка точка от правата на ограничението за робуста важи, че изразходваното количество робуста е 120 кг., защото ограничението е изпълнено строго.\nВъв всяка точка от правата на ограничението за търсене на Делукс важи, че изразходваното количество “търсене на Делукс” е 150 кг.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Анализ на чувствителността на решението</span>"
    ]
  },
  {
    "objectID": "03-Graphical-Method/02-Sensitivity.html#допустими-граници-на-промяна",
    "href": "03-Graphical-Method/02-Sensitivity.html#допустими-граници-на-промяна",
    "title": "3  Анализ на чувствителността на решението",
    "section": "3.2 Допустими граници на промяна",
    "text": "3.2 Допустими граници на промяна\n\nВ какви граници може да се променя ограничението за арабика без да се промени характера на оптималния план (без да се променят дефицитните ресурси)?\nВ какви граници може да се променя ограничението за робуста без да се промени характера на оптималния план (без да се променят дефицитните ресурси)?\nВ какви граници може да се променя ограничението за търсенето на Супер еспресо кафе без да се промени характера на оптималния план (без да се променят дефицитните ресурси, определящи настоящото решение)?\n\nЗа да видим как се променя решението на задачата, когато варираме наличното количество робуста, ще я решим графично при четири нива на наличност на ресурса: 120 кг., 180 кг., 195 кг. и 220 кг. Уравненията на ограниченията за всяко от тези нива са:\n\n\\begin{align*}\n0.5 x_1 + 0.75 x_2 & = 160 \\text{ налични 160 кг. (първоначална задача)} \\\\\n0.5 x_1 + 0.75 x_2 & = 180 \\text{ налични 180 кг.} \\\\\n0.5 x_1 + 0.75 x_2 & = 195 \\text{ налични 195 кг.} \\\\\n0.5 x_1 + 0.75 x_2 & = 220 \\text{ налични 220 кг.} \\\\\n\\end{align*}\n\nГрафично тези четири уравнения представляват четири успоредни прави (защото коефициентите пред x_1 и x_2 са едни и същи) и са изобразени във Фигура 3.1.\n\n\nПокажи\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nvertices = [(0, 0), (0, 150), (95, 150), (200, 80), (240, 0)]\n\nvertices_x = [x for x, y in vertices]\nvertices_y = [y for x, y in vertices]\n\nplt.plot([0, 240], [480, 0], color='grey')\nplt.plot([0, 320], [213.33, 0], color='grey')\nplt.plot([0, 0], [0, 150], color='grey')\nplt.plot([0, 400], [150, 150], color='grey')\nplt.plot([0, 0], [0, 500], color='grey')\n\nplt.fill(vertices_x, vertices_y, color='grey', alpha=0.3)\n\nplt.xlim(-10, 400)\nplt.ylim(-10, 400)\n\nplt.xlabel(r'$x_1$')\nplt.ylabel(r'$x_2$')\n\npalette = sns.color_palette(\"mako\", n_colors=4).as_hex()\n\nfor idx, q in enumerate([120, 180, 195, 220]):\n    plt.axline([0, q / 0.75], slope=-0.5/0.75,\n               label=fr\"$0.5x_1 + 0.75 x_2 = {q}$ kg робуста\",\n               linestyle='--', \n               color=palette[idx],\n               alpha=0.7\n               )\n\nfor idx, (x, y) in enumerate(vertices):\n    plt.annotate(f\"({x}, {y})\", (x, y), xytext=(2, 3), textcoords='offset points')\n\nplt.legend(loc=0)\n\n\n\n\n\n\n\n\nФигура 3.1: Промяна в наличността на робуста\n\n\n\n\n\nОт графиката виждаме, че при наличие на робуста от повече от 195 кг. се променя характера на оптимума, защото дефицитни стават ресурсите “арабика” и “търсене Делукс”. Разликата между 195 кг. и първоначално наличните в задачата 160 кг. наричаме допустимо увеличение на ресурса (195 - 160 = 35 кг.). Новият оптимум е пресечната точка на “арабика” и “търсене на Делукс”. Можем да намерим координатите на тази точка като решение на системата от двете уравнения, които съответстват на тези ограничения:\n\n\\begin{align*}\n0.5 x_1 + 0.25 x_2 & = 120  \\\\\n0 \\cdot x_1 + x_2 & = 150\n\\end{align*}\n\nРешението на системата е (165, 150). За разлика от оптимумите при 160 кг. и 180 кг. робуста, сега дефицитните ресурси са “арабика” и “търсене на Делукс”.\nВ четвъртия случай при наличие на 195 кг. робуста допустимото множество съвпада с това в предходния пример при 220 кг. По тази причина и оптимумът е същият: (165, 150) при ниво на печалба 40 \\cdot 165 + 50 \\cdot 150 = 14100 лв.\nОт тези примери виждаме, че количеството робуста може да се увеличи с най-много 195 - 160 = 35 кг. без да се промени характера на оптимума. Това количество наричаме допустимо увеличение (allowable increase).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Анализ на чувствителността на решението</span>"
    ]
  },
  {
    "objectID": "03-Graphical-Method/02-Sensitivity.html#скрити-цени",
    "href": "03-Graphical-Method/02-Sensitivity.html#скрити-цени",
    "title": "3  Анализ на чувствителността на решението",
    "section": "3.3 Скрити цени",
    "text": "3.3 Скрити цени\nВ предходната секция изчислихме, че можем да увеличим наличността от арабика до 195 кг. без това да промени характера на решението. Максималната печалба при x_1 = 165, x_2 = 150 e\n\nz = 40 \\cdot 165 + 50 \\cdot 150 = 14100.\n\nТази по-висока печалба можем да постигнем за сметка на 195 - 160 = 35 кг. допълнително количество робуста. Съотношението между допълнителната печалба и допълнителното количество ресурс наричаме скрита цена на (кубинското) кафе:\n\n\\frac{\\Delta z^*}{\\Delta r^*} = \\frac{z^{*1} - z^{*}}{r^{*1} - r^{*}} = \\frac{14100 - 12000}{195 - 160} =\n\\frac{2100}{35} = 60\n\n\nДоставчикът предлага да достави допълнителни 10 кг. робуста на цена от 20 лв./кг. Бихте ли препоръчали на заведението да приеме тази оферта?\nСъседно заведение предлага да купи 5 килограма от арабика на цена 40 лв./кг. Изгодно ли е за заведението да продаде това количество кафе?\nМениджърът на заведението предлага да въведе нов продукт, който предполага, че ще може да продава на цена не по-малка от 6 лв./кг. За производството на един килограм от този нов продукт са нужни 0.7 кг. бразилско и 0.3 кг. робуста. Бихте ли препоръчали на фирмата да започне това производство?",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Анализ на чувствителността на решението</span>"
    ]
  },
  {
    "objectID": "03-Graphical-Method/02-Sensitivity.html#реализация-в-excel",
    "href": "03-Graphical-Method/02-Sensitivity.html#реализация-в-excel",
    "title": "3  Анализ на чувствителността на решението",
    "section": "3.4 Реализация в Excel",
    "text": "3.4 Реализация в Excel\nТук можете да изтеглите пример за реализация в Excel.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Анализ на чувствителността на решението</span>"
    ]
  },
  {
    "objectID": "03-Graphical-Method/02-Sensitivity.html#задача",
    "href": "03-Graphical-Method/02-Sensitivity.html#задача",
    "title": "3  Анализ на чувствителността на решението",
    "section": "3.5 Задача",
    "text": "3.5 Задача\nМеталургично предприятие произвежда стоманени и чугунени отливки на две машини. Производството на една стоманена отливка изисква 2 ч. време на първата машина и 1 час на втората. Чугунените отливки изискват един час на първата машина и три на втората. Общият капацитет на машините е 8 ч. на ден. Компанията се стреми да максимизира печалбата си, към която една стоманена отливка допринася с 100 лв., а чугунена с 120 лв. Колко от коя отливка трябва да произведе компанията, за да максимизира печалбата си?\n\n\\begin{align*}\nx_s: & \\text{ брой стоманени отливки} \\\\\nx_c: & \\text{ брой чугунени отливки}\n\\end{align*}\n\n\n\\begin{align*}\n\\max & 100x_s + 120x_c \\\\\n\\text{при условия} & \\\\\n2 x_s + x_c & \\leq 8 \\\\\nx_s + 3x_c & \\leq 8 \\\\\nx_s, x_c & \\geq 0\n\\end{align*}\n\n\n\nПокажи\nimport matplotlib.pyplot as plt\n\n# Define the constraints\nx_s = [0, 8]  # Range of x_s values\nx_c1 = [0, 8]  # Range of x_c values for constraint 1\nx_c2 = [0, 8]  # Range of x_c values for constraint 2\n\n# Plot the constraints\nplt.plot(x_s, [8 - 2 * x for x in x_s], label=r\"$2x_s + x_c \\leq 8$\")\nplt.plot(x_s, [(8 - x) / 3 for x in x_s], label=r\"$x_s + 3x_c \\leq 8$\")\n\nplt.annotate(f\"({3.2}, {1.6})\", (3.2, 1.6), textcoords=\"offset points\", xytext=(20,5), ha='center')\n\n# Set the x and y axis labels\nplt.xlabel(r\"$x_s$\")\nplt.ylabel(r\"$x_c$\")\n\n# Set the x and y axis limits\nplt.xlim(0, 8)\nplt.ylim(0, 8)\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\n\n\nВъпроси:\n\nПредприятието обмисля да увеличи работния капацитет на машините си. Коя машина би трябвало да е приоритетна?\nБизнес консултанти препоръчват на предприятието да увеличи капацитета на машините си на цена от 10 лв. на ден за всяка от машините. Бихте ли препоръчали на предприятието да приеме тази оферта?\nБизнес консултанти препоръчват на предприятието да въведе нов продукт, който би заел 2 ч. на първата машина и 2 ч. на втората машина. Очакваната печалба от продажбата на една единица от този продукт е 125 лв. Бихте ли препоръчали на предприятието да започне производството на този продукт? Колко най-малко трябва да е цената на продукта, за да се оправдае производството му?\nКак би се променила оптималната печалба при увеличение на капацитета на първата машина на 20 ч. на ден?\n\n\n\nПокажи\nimport gurobipy as gp\nfrom gurobipy import GRB\n\n# Create a new model\nm = gp.Model(\"Casting problem\")\nm.Params.LogToConsole = 0\n\n# Create variables\nx_s = m.addVar(vtype=GRB.CONTINUOUS, name=\"Steel\")\nx_c = m.addVar(vtype=GRB.CONTINUOUS, name=\"Cast iron\")\n\n# Set objective\nm.setObjective(100 * x_s + 120 * x_c, sense=GRB.MAXIMIZE)\n\nm.addConstr(2 * x_s + x_c &lt;= 8)\nm.addConstr(x_s + 3 * x_c &lt;= 8)\n\n# Optimize model\nm.optimize()\n\nprint(f\"Steel: {x_s.x}\")\nprint(f\"Cast iron: {x_c.x}\")\n\n\nRestricted license - for non-production use only - expires 2025-11-24\nSteel: 3.2\nCast iron: 1.6\n\n\n\n\nПокажи\nimport gurobipy as gp\nfrom gurobipy import GRB\n\n# Create a new model\nm = gp.Model(\"Casting problem\")\nm.Params.LogToConsole = 0\n\n# Create variables\nx_s = m.addVar(vtype=GRB.CONTINUOUS, name=\"Steel\")\nx_c = m.addVar(vtype=GRB.CONTINUOUS, name=\"Cast iron\")\nx_n = m.addVar(vtype=GRB.CONTINUOUS, name=\"New product\")\n\n# Set objective\nm.setObjective(100 * x_s + 120 * x_c + 125 * x_n, sense=GRB.MAXIMIZE)\n\nm.addConstr(2 * x_s + x_c + 2 * x_n &lt;= 8)\nm.addConstr(x_s + 3 * x_c + 2 * x_n &lt;= 8)\n\n# Optimize model\nm.optimize()\n\nprint(f\"Steel: {x_s.x}\")\nprint(f\"Cast iron: {x_c.x}\")\nprint(f\"New product: {x_n.x}\")\n\n\nSteel: 3.2\nCast iron: 1.6\nNew product: 0.0",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Анализ на чувствителността на решението</span>"
    ]
  },
  {
    "objectID": "04-Simplex/01-Canonical-Representation.html",
    "href": "04-Simplex/01-Canonical-Representation.html",
    "title": "4  Каноничен вид на задачата за линейно програмиране",
    "section": "",
    "text": "4.1 Опорни планове\nA = \\begin{pmatrix}\n3 & 1 & 1 & 0\\\\\n2 & 0 & 0 & 1\n\\end{pmatrix}\n\\quad\nb = \\begin{pmatrix}\n1\\\\\n1\n\\end{pmatrix}\n\\quad\nx = \\begin{pmatrix}\nx_1\\\\\nx_2\\\\\nx_3\\\\\nx_4\n\\end{pmatrix}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Каноничен вид на задачата за линейно програмиране</span>"
    ]
  },
  {
    "objectID": "04-Simplex/01-Canonical-Representation.html#опорни-планове",
    "href": "04-Simplex/01-Canonical-Representation.html#опорни-планове",
    "title": "4  Каноничен вид на задачата за линейно програмиране",
    "section": "",
    "text": "Упражнение 4.3 (Опорен план) Дадена е задачата\n\n\\begin{align*}\n& 3 x_1 + x_2 + x_3 = 1 \\\\\n& 2 x_1 +       x_4 = 1\n\\end{align*}\n\nЗапишете задачата в матричен вид: A x = b и проверете дали x^{(1)} = (0, 0, 1, 1) е опорен план.\n\n\n\nУпражнение 4.4 Дадена е задачата\n\n\\begin{align*}\n3 x_1 + x_2  & = 1 \\\\\n2 x_1 +       x_4 & = 1 \\\\\n-2 x_1 + x_3 - 3 x_4 & = 0\n\\end{align*}\n\nЗапишете задачата в матричен вид: А x = b и проверете дали x^{(1)} = (0, 2, 0, 0)^T е опорен план. Кои са възможните базисни променливи за x^{(2)} = (0, 1, 0, 0).\n\n\n\n\n\n\n\nРешение\n\n\n\n\n\n\n\\begin{align*}\n& А = \\begin{pmatrix}\n3 & 1 & 1 & 0\\\\\n2 & 0 & 0 & 1\n\\end{pmatrix} \\\\\n& b = (0, 1)^T \\\\\n& x = (x_1, x_2, x_3, x_4)^T\n\\end{align*}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Каноничен вид на задачата за линейно програмиране</span>"
    ]
  },
  {
    "objectID": "04-Simplex/01-Canonical-Representation.html#базисно-представяне-на-каноничната-задача",
    "href": "04-Simplex/01-Canonical-Representation.html#базисно-представяне-на-каноничната-задача",
    "title": "4  Каноничен вид на задачата за линейно програмиране",
    "section": "4.2 Базисно представяне на каноничната задача",
    "text": "4.2 Базисно представяне на каноничната задача\n\nНеотрицателни десни страни\nЕдна базисна променлива във всяко уравнение уравнение с коефициент 1\n\n\nУпражнение 4.5 (Базисно представяне) Намерете базисното представяне на каноничния вид на следните ограничения при базисни променливи x_1 и x_3.\n\n\\begin{align*}\n& x_1 + x_2 \\leq 2 \\\\\n& x_3 + x_4 \\leq 8 \\\\\n& x_4 \\leq 8\n\\end{align*}\n\n\n\nУпражнение 4.6 Намерете базисното представяне на каноничния вид на следните две ограничения при базисни променливи x_1 и x_3.\n\n\\begin{align*}\n& 2x_1 + 3 x_2 = 0 \\\\\n& x_1 - x_3  + s_2 = -4\n\\end{align*}\n\n\n\nУпражнение 4.7 Намерете базисното представяне при базисни променливи x_1 и x_3.\n\n\\begin{align*}\n& 2x_1 + x_2 + x_3 = 2 \\\\\n& x_1 + x_3 + s_2 = 1\n\\end{align*}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Каноничен вид на задачата за линейно програмиране</span>"
    ]
  },
  {
    "objectID": "04-Simplex/01-Canonical-Representation.html#симплекс-алгоритъм",
    "href": "04-Simplex/01-Canonical-Representation.html#симплекс-алгоритъм",
    "title": "4  Каноничен вид на задачата за линейно програмиране",
    "section": "4.3 Симплекс алгоритъм",
    "text": "4.3 Симплекс алгоритъм\n\n\\begin{align*}  \n& x_1: \\text{ светла бира (л.)}\\\\\n& x_2: \\text{ тъмна бира (л.)}\n\\end{align*}\n\n\n\\begin{align*}\n& \\max Z(x) = 5x_1 + 5x_2\\\\\n& 2x_1 + x_2 \\leq 10 \\text{ Хмел}\\\\\n& x_1 + 2x_2 \\leq 8 \\text{ Малц}\\\\\n& x_1, x_2 \\ge 0\\\\\n\\end{align*}\n\nКаноничният вид на задачата е:\n\n\\begin{align}\n\\begin{split}\n\\max Z(x) = 5x_1 + 5x_2\\\\\n2x_1 + x_2 + s_1 = 10 \\text{ Хмел}\\\\\nx_1 + 2x_2 + s_2 = 8 \\text{ Малц}\\\\\nx_1, x_2, s_1, s_2 \\geq 0\n\\end{split}\n\\label{eq:bier-canonical}\n\\end{align}\n\nкъдето s_1, s_2 са допълнителни неотрицателни променливи. В матричен вид каноничната задача изглежда така:\n\n\\begin{align*}\n\\begin{pmatrix}\n2 & 1 & 1 & 0 \\\\\n1 & 2 & 0 & 1\n\\end{pmatrix}\n\\begin{pmatrix}\nx_1 \\\\\nx_2 \\\\\ns_1 \\\\\ns_2 \\\\\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n10 \\\\\n8\n\\end{pmatrix}\n\\end{align*}\n\nПървоначален опорен план намираме, като фиксираме x_1, x_2 = 0 и решаваме системата от уравнения за s_1 и s_2.\nОпорен план ли е x^{0} = (0, 0, 10, 8)^T? Заместваме с x_0 и получаваме, че е допустим план, тъй като системата уравнения е изпълнена:\n\n\\begin{align*}\n\\begin{pmatrix}\n2 & 1 & 1 & 0 \\\\\n1 & 2 & 0 & 1\n\\end{pmatrix}\n\\begin{pmatrix}\n0\\\\\n0\\\\\n10\\\\\n8\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n10\\\\\n8\n\\end{pmatrix}\n\\end{align*}\n\n\n\\begin{align*}\n\\begin{vmatrix}\n1 & 0\\\\\n0 & 1\n\\end{vmatrix}\n= 1 - 0 = 1 \\neq 0\n\\end{align*}\n\nСлед като имаме първоначален опорен план (и следователно базисни променливи) е удобно да напишем системата уравнения (eq:bier-canonical) като изразим базисните променливи чрез не-базисните променливи:\n\n\\begin{align}\ns_1 = 10 - (2x_1 + x_2) \\label{eq:bier-malt}\\\\\ns_2 = 8 - (x_1 + 2x_2) \\label{eq:bier-hop}\\\\\n\\end{align}\n\nсъщото можем да направим и с целевата функция:\n\n\\begin{align}\nZ = 0 - (-5x_1 - 5x_2) \\label{eq:bier-obj}\n\\end{align}\n\nСлед като вече имаме първоначален опорен план, попълваме първата симплекс таблица:\n\n\n\n\n\n\n\n\n\n\n\n\n\nТаблица 1\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n5\n5\n0\n0\n\n\n\nБазисни пр.\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\nX_B/x_1\n\n\ns_1\n0\n10\n2\n1\n1\n0\n10 / 2 = 5\n\n\ns_2\n0\n8\n1\n2\n0\n1\n8 / 1 = 8\n\n\nZ\n\nZ_j\n0\n0\n0\n0\n\n\n\n\n\n\\Delta_j = Z_j - C_j\n0 -5 = 0\n0 -5 = 0\n0\n0\n\n\n\n\nкъдето C_j са коефициентите на променливите в целевата функция, C_B са коефициентите на базисните променливи в целевата функция. Редът Z_j получаваме, като образуваме сумата на произведенията на коефициентите на променливите в системата уравнения и коефициентите на базисните променливи в целевата функция. За x_1 получаваме: 0 \\cdot 2 + 0 \\cdot 1 = 0. Индексната оценка на x_1 получаваме, като от Z_j извадим коефициента на x_1 в целевата функция: \\Delta_j = Z_j - C_j = 0 - 5 = -5. По същия начин изчисляваме индексните оценки и на останалите променливи. Обърнете внимание, че тези индексни оценки съответстват на коефициентите на не-базисните променливи в целевата функция в . Стойността на целевата функция получаваме, като съберем произведението на X_B и C_B: 10 \\cdot 0 + 8 \\cdot 0 = 0.\nИндексните оценки ни показват с колко би се променила целевата функция, ако увеличим променливата с една единица. Отрицателни индексни оценки означават увеличение на целевата функция. В настоящия пример индексните оценки са отрицателни за x_1 и x_2, което означава, че печалбата на фирмата би нарастнала, ако увеличим производството на светла или тъмна бира. Тъй като нарастването на печалбата е еднакво и за двата продукта (произволно) избираме да увеличим x_1. Въпросът е с колко най-много можем да увеличим производството на светла бира без да нарушаваме ограниченията. Отговор на този въпрос ни дава колконката X_B / x_1. Най-малката стойност в тази колконка е 5, което означава, че можем да увеличим x_1 най-много до 5. За да се убедим, че това е така, можем да заместим с x_1 = 8 в първото уравнение от Системата :\n\ns_1 = 10 - (2 \\cdot 8 + \\underbrace{x_2}_{=0}) = -6\n\nТова уравнение е изпълнено за s_1 = -6, но това нарушава ограничението за неотрицателност на s_1. Избрахме да увеличим x_1 от 0 в настоящото решение на 5, т.е. x_1 става базисна променлива. Видяхме, че най-малката стойност на X_B / x_1 е в първия ред на таблицата, който съответства на s_1. Това означава, че s_1 излиза от базиса и в следващото решение на системата ще е нула.\n\ns_1 = 10 - (2 \\cdot 5 - \\underbrace{x_2}_{= 0}) \\implies s_1 = 0.\n\nЗа да видим, дали върхът (5, 0, 0, 4) е оптимален, изразяваме всяка базисна променлива (x_1 и s_2), както и целевата функция отново с не-базисни променливи:\nОт\n\n\\begin{align*}\n& s_1 = 10 - 2x_1 - x_2\\\\\n& s_2 = 8 - x_1 - 2x_2\\\\\n\\end{align*}\n\nполучаваме\n\n\\begin{align*}\n& x_1 = 5 - \\frac{1}{2}s_1 - \\frac{1}{2}x_2 \\\\\n& s_2 = 8 - \\left(5 - \\frac{1}{2}s_1 - \\frac{1}{2}x_2\\right) - 2x_2\n\\end{align*}\n\n\n\\begin{align}\n\\begin{split}\nx_1 = 5 - \\frac{1}{2}s_1 - \\frac{1}{2}x_2\\\\\ns_2 = 3 + \\frac{1}{2}s_1 -\\frac{3}{2}x_2\n\\end{split}\n\\label{eq:bier-canonical-1}\n\\end{align}\n\nИзразяваме и целевата функция само с небазисни променливи:\n\n\\begin{align*}\n& z = 5\\left(5 - \\frac{1}{2}s_1 - \\frac{1}{2}x_2\\right) + 5x_2 \\implies \\\\\n& z = 25 - \\left(- \\frac{5}{2} x_2 + \\frac{5}{2}s_1 \\right)\n\\end{align*}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nТаблица 2\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n5\n5\n0\n0\n\n\n\nБазисни пр.\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\nX_B/x_2\n\n\nx_1\n5\n5\n1\n1/2\n1/2\n0\n5 / (1/2) = 10\n\n\ns_2\n0\n3\n0\n3/2\n-1/2\n1\n3 / (3/2) = 2\n\n\nZ = 25\n\nZ_j\n5\n5/2\n5/2\n0\n\n\n\n\n\n\\Delta_j\n0\n-5/2\n5/2\n0\n\n\n\n\nОт индексните оценки виждаме, че планът (5, 0, 0, 3) не е оптимален, защото x_2 е не-базисна променлива с отрицателна индексна оценка. Най-гомялото възможно увеличение на x_2 е 2 (втори ред), следователно x_2 влиза в базиса на мястото на s_2.\nПреобразуваме системата уравнения , така че новите базисни променливи да са от лявата страна на уравненията с коефициент 1 и изразяваме целевата функция с небазисните променливи:\n\n\\begin{align*}\n& x_1 = 5 - \\frac{1}{2}s_1 - \\frac{1}{2}x_2 \\\\\n& x_2 = \\frac{3}{1.5} + \\frac{1}{2\\cdot 1.5}s_1 - \\frac{1}{1.5}s_2\n\\end{align*}\n\n\n\\begin{align*}\n& x_1 = 5 - \\frac{1}{2}s_1 - \\frac{1}{2}\\left(2 + \\frac{1}{3}s_1 - \\frac{1}{1.5}s_2\\right) \\\\\n& x_2 = 2 + \\frac{1}{3}s_1 - \\frac{1}{1.5}s_2\n\\end{align*}\n\n\n\\begin{align*}\n& x_1 = 4 - 0.66s_1 + \\frac{1}{3}s_2\\\\\n& x_2 = 2 + \\frac{1}{3}s_1 - \\frac{1}{1.5}s_2\n\\end{align*}\n\nИзразяваме целевата функция само с нулеви променливи:\n\n\\begin{align*}\nz = 25 - \\frac{5}{2}s_1 + 2.5\\left(\\frac{1}{3}s_1 - \\frac{1}{1.5}s_2\\right)\\\\\nz = 30 - (1.66s_1 + 1.66s_2)\n\\end{align*}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nТаблица 3\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n5\n5\n0\n0\n\n\n\nБазисни пр.\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\n\n\n\nx_1\n5\n4\n1\n0\n2/3\n-1/3\n\n\n\nx_2\n5\n2\n0\n1\n-1/3\n2/3\n\n\n\nZ = 30\n\nZ_j\n5\n5\n1.667\n1.667\n\n\n\n\n\n\\Delta_j\n0\n0\n1.667\n1.667\n\n\n\n\nПланът е оптимален, защото няма небазисни променливи с отрицателни индексни оценки. Така получаваме, че решението на оптимизационната задача е: (4, 2, 0, 0) при стойност на целевата функция Z^{*} = 30. Дефицитни са и двата ресурса: s_1 = 0, s_2 = 0.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Каноничен вид на задачата за линейно програмиране</span>"
    ]
  },
  {
    "objectID": "04-Simplex/01-Canonical-Representation.html#simplex-unbounded",
    "href": "04-Simplex/01-Canonical-Representation.html#simplex-unbounded",
    "title": "4  Каноничен вид на задачата за линейно програмиране",
    "section": "4.4 Неограничено решение",
    "text": "4.4 Неограничено решение\nРешете задачата с помощта на симплекс алгоритъма.\n\n\\begin{align*}\n& \\max z = 2x_1 + x_2 \\\\\n& -x_1 + x_2  + s_1 = 10 \\\\\n& -2x_1 + s_2 = 40\\\\\n& x_1, x_2, s_1, s_2 \\geq 0\n\\end{align*}\n\n\n\n\nТаблица 1\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n\n\n\n\n\n\n\nБазисни пр.\nC_B\nX_B\n_\n_\n_\n_\n_\n\n\n\n\n_\n\n\n\n\n\n\n\n\n\n_\n\n\n\n\n\n\n\nZ\n\nZ_j\n\n\n\n\n\n\n\n\n\n\\Delta_j\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nТаблица 1\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n2\n1\n0\n0\n\n\n\nБазисни пр.\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\n\n\n\ns_1\n0\n10\n-1\n1\n1\n0\n—\n\n\ns_2\n0\n40\n-2\n0\n0\n1\n—\n\n\nZ\n\nZ_j\n0\n0\n0\n0\n\n\n\n\n\n\\Delta_j\n-2\n-1\n0\n0\n\n\n\n\nx_1 е не-базисна променлива с отрицателна индексна оценка и трябва да стане базисна, но има отрицателни коефициенти, следователно целевата функция е неограничена.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Каноничен вид на задачата за линейно програмиране</span>"
    ]
  },
  {
    "objectID": "04-Simplex/01-Canonical-Representation.html#simplex-infeasible",
    "href": "04-Simplex/01-Canonical-Representation.html#simplex-infeasible",
    "title": "4  Каноничен вид на задачата за линейно програмиране",
    "section": "4.5 Празно допустимо множество",
    "text": "4.5 Празно допустимо множество\nРешете задачата с помощта на симплекс алгоритъма.\n\n\\begin{align*}\n& \\max z = 3x_1 + 2x_2 \\\\\n& 2x_1 + x_2  \\leq 2 \\\\\n& 3x_1 + 4x_2 \\geq 12 \\\\\n& x_1, x_2 \\geq 0\n\\end{align*}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nТаблица 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n\n\n\n\n\n\n\n\n\nБазисни пр.\nC_B\nX_B\n_\n_\n_\n_\n_\n_\n_\n\n\n\n\n_\n\n\n\n\n\n\n\n\n\n\n\n_\n\n\n\n\n\n\n\n\n\nZ\n\nZ_j\n\n\n\n\n\n\n\n\n\n\n\n\\Delta_j\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nТаблица 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n3\n2\n0\n0\n-М\n\n\n\nБазисни пр.\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\nА_2\n\n\n\ns_1\n0\n2\n2\n1\n1\n0\n0\n\n\n\nА_2\n-М\n12\n3\n4\n0\n-1\n1\n\n\n\nZ\n\nZ_j\n-3M\n-4M\n0\nM\n-M\n\n\n\n\n\n\\Delta_j\n-2M - 3\n-4M - 2\n0\nM\n0\n\n\n\n\n\n&lt;- (1) / 1\n&lt;- (2) - 4(1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nТаблица 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n3\n2\n0\n0\n-М\n\n\n\nБазисни пр.\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\nА_2\n\n\n\nx_2\n2\n2\n2\n1\n1\n0\n0\n\n\n\nА_2\n-М\n4\n-5\n0\n-4\n-1\n1\n\n\n\nZ\n\nZ_j\n5M + 4\n2\n4M + 2\nM\n-M\n\n\n\n\n\n\\Delta_j\n5M + 1\n0\n4M + 2\nM\n0\n\n\n\n\nВсички индексни оценки са неотрицателни, следователно оптималното решение е x_1 = 0, x_2 = 2, A_2 = 4, s_1 = 0, s_2 = 0. Тъй като решението включва положителна стойност на А_2, задачата няма допустимо решение, тъй като е нарушено второто ограничение:\n\n\\begin{align*}\n& 3 x_1 + 4x_2 -s_2 - A_2 = 12\\\\\n& 3 \\cdot 0 + 4 \\cdot 2 - 0 - 4 = 12\\\\\n& 8 - 4 = 12\n\\end{align*}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Каноничен вид на задачата за линейно програмиране</span>"
    ]
  },
  {
    "objectID": "04-Simplex/01-Canonical-Representation.html#simplex-infinite",
    "href": "04-Simplex/01-Canonical-Representation.html#simplex-infinite",
    "title": "4  Каноничен вид на задачата за линейно програмиране",
    "section": "4.6 Множество решения",
    "text": "4.6 Множество решения\nРешете задачата с помощта на симплекс алгоритъма.\n\n\\begin{align*}\n& \\max z = 2x_1 + 4x_2 \\\\\n& x_1 + 2x_2  \\leq 5 \\\\\n& x_1 + x_2 \\leq 4 \\\\\n& x_1, x_2 \\geq 0\n\\end{align*}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nТаблица 1\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n2\n4\n0\n0\n\n\n\nБазисни пр.\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\n_\n\n\ns_1\n0\n5\n1\n2\n1\n0\n\n\n\ns_2\n0\n4\n1\n1\n0\n1\n\n\n\nZ\n\nZ_j\n0\n0\n0\n0\n\n\n\n\n\n\\Delta_j\n-2\n-4\n0\n0\n\n\n\n\n\n&lt;- (1) / 2\n&lt;- (2) - (1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nТаблица 2\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n2\n4\n0\n0\n\n\n\nБазисни пр.\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\n_\n\n\nx_2\n4\n5/2\n1/2\n1\n1/2\n0\n\n\n\ns_2\n0\n3/2\n1/2\n0\n-1/2\n1\n\n\n\nZ\n\nZ_j\n2\n4\n2\n0\n\n\n\n\n\n\\Delta_j\n0\n0\n2\n0\n\n\n\n\n\n&lt;- (2) / (1/2)\n&lt;- (1) - (2)/2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nТаблица 3\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n2\n4\n0\n0\n\n\n\nБазисни пр.\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\n_\n\n\nx_2\n4\n1\n0\n1\n1\n-1\n\n\n\nx_1\n2\n3\n1\n0\n-1\n2\n\n\n\nZ\n\nZ_j\n2\n4\n2\n0\n\n\n\n\n\n\\Delta_j\n0\n0\n2\n0\n\n\n\n\nВсички оптимални решения са дадени от:\n\nx^* = \\alpha\n\\begin{pmatrix}\n0 \\\\\n5/2 \\\\\n0 \\\\\n3/2\n\\end{pmatrix} + (1 -\\alpha)\n\\begin{pmatrix}\n3 \\\\\n1 \\\\\n0 \\\\\n0\n\\end{pmatrix},\\quad \\alpha \\in [0, 1]",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Каноничен вид на задачата за линейно програмиране</span>"
    ]
  },
  {
    "objectID": "04-Simplex/01-Canonical-Representation.html#simplex-degenerate",
    "href": "04-Simplex/01-Canonical-Representation.html#simplex-degenerate",
    "title": "4  Каноничен вид на задачата за линейно програмиране",
    "section": "4.7 Изродено решение",
    "text": "4.7 Изродено решение\nРешете задачата с помощта на симплекс алгоритъма.\n\n\\begin{align*}\n& \\max z = x_1 + 3x_2 \\\\\n& x_1 + 4x_2  \\leq 8 \\\\\n& x_1 + 2x_2 \\leq 4 \\\\\n& x_1, x_2 \\geq 0\n\\end{align*}\n\n\n\n\nТаблица 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n\n\n\n\n\n\n\n\nБазисни пр.\nC_B\nX_B\n_\n_\n_\n_\n_\n_\n\n\n\n\n_\n\n\n\n\n\n\n\n\n\n\n_\n\n\n\n\n\n\n\n\nZ\n\nZ_j\n\n\n\n\n\n\n\n\n\n\n\\Delta_j\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nТаблица 1\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n1\n3\n0\n0\n\n\n\nБазисни пр.\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\n_\n\n\ns_1\n0\n8\n1\n4\n1\n0\n\n\n\ns_2\n0\n4\n1\n2\n0\n1\n\n\n\nZ\n\nZ_j\n0\n0\n0\n0\n\n\n\n\n\n\\Delta_j\n-1\n-3\n0\n0\n\n\n\n\n\n&lt;- (2) / 2\n&lt;- (1) - 4(2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nТаблица 2\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n1\n3\n0\n0\n\n\n\nБазисни пр.\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\n_\n\n\ns_1\n0\n0\n-1\n0\n1\n-2\n\n\n\nx_2\n3\n2\n1/2\n1\n0\n1/2\n\n\n\nZ\n\nZ_j\n3/2\n3\n0\n3/2\n\n\n\n\n\n\\Delta_j\n1/2\n0\n0\n3/2\n\n\n\n\nОптималният план е (0, 3, 0, 0), който е изроден, тъй като в него има базисни променливи, които са равни на нула.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Каноничен вид на задачата за линейно програмиране</span>"
    ]
  },
  {
    "objectID": "04-Simplex/02-Simplex-Method.html",
    "href": "04-Simplex/02-Simplex-Method.html",
    "title": "5  Симплекс алгоритъм",
    "section": "",
    "text": "5.1 Неограничено решение\nРешете задачата с помощта на симплекс алгоритъма.\n\\begin{align*}\n& \\max z = 2x_1 + x_2 \\\\\n& -x_1 + x_2  + s_1 = 10 \\\\\n& -2x_1 + s_2 = 40\\\\\n& x_1, x_2, s_1, s_2 \\geq 0\n\\end{align*}\nx_1 е не-базисна променлива с отрицателна индексна оценка и трябва да стане базисна, но има отрицателни коефициенти, следователно целевата функция е неограничена.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Симплекс алгоритъм</span>"
    ]
  },
  {
    "objectID": "04-Simplex/02-Simplex-Method.html#simplex-unbounded",
    "href": "04-Simplex/02-Simplex-Method.html#simplex-unbounded",
    "title": "5  Симплекс алгоритъм",
    "section": "",
    "text": "Таблица 1\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n\n\n\n\n\n\n\nБазисни пр.\nC_B\nX_B\n_\n_\n_\n_\n_\n\n\n\n\n_\n\n\n\n\n\n\n\n\n\n_\n\n\n\n\n\n\n\nZ\n\nZ_j\n\n\n\n\n\n\n\n\n\n\\Delta_j\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nТаблица 1\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n2\n1\n0\n0\n\n\n\nБазисни пр.\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\n\n\n\ns_1\n0\n10\n-1\n1\n1\n0\n—\n\n\ns_2\n0\n40\n-2\n0\n0\n1\n—\n\n\nZ\n\nZ_j\n0\n0\n0\n0\n\n\n\n\n\n\\Delta_j\n-2\n-1\n0\n0",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Симплекс алгоритъм</span>"
    ]
  },
  {
    "objectID": "04-Simplex/02-Simplex-Method.html#simplex-infeasible",
    "href": "04-Simplex/02-Simplex-Method.html#simplex-infeasible",
    "title": "5  Симплекс алгоритъм",
    "section": "5.2 Празно допустимо множество",
    "text": "5.2 Празно допустимо множество\nРешете задачата с помощта на симплекс алгоритъма.\n\n\\begin{align*}\n& \\max z = 3x_1 + 2x_2 \\\\\n& 2x_1 + x_2  \\leq 2 \\\\\n& 3x_1 + 4x_2 \\geq 12 \\\\\n& x_1, x_2 \\geq 0\n\\end{align*}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nТаблица 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n\n\n\n\n\n\n\n\n\nБазисни пр.\nC_B\nX_B\n_\n_\n_\n_\n_\n_\n_\n\n\n\n\n_\n\n\n\n\n\n\n\n\n\n\n\n_\n\n\n\n\n\n\n\n\n\nZ\n\nZ_j\n\n\n\n\n\n\n\n\n\n\n\n\\Delta_j\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nТаблица 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n3\n2\n0\n0\n-М\n\n\n\nБазисни пр.\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\nА_2\n\n\n\ns_1\n0\n2\n2\n1\n1\n0\n0\n\n\n\nА_2\n-М\n12\n3\n4\n0\n-1\n1\n\n\n\nZ\n\nZ_j\n-3M\n-4M\n0\nM\n-M\n\n\n\n\n\n\\Delta_j\n-2M - 3\n-4M - 2\n0\nM\n0\n\n\n\n\n\n&lt;- (1) / 1\n&lt;- (2) - 4(1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nТаблица 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n3\n2\n0\n0\n-М\n\n\n\nБазисни пр.\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\nА_2\n\n\n\nx_2\n2\n2\n2\n1\n1\n0\n0\n\n\n\nА_2\n-М\n4\n-5\n0\n-4\n-1\n1\n\n\n\nZ\n\nZ_j\n5M + 4\n2\n4M + 2\nM\n-M\n\n\n\n\n\n\\Delta_j\n5M + 1\n0\n4M + 2\nM\n0\n\n\n\n\nВсички индексни оценки са неотрицателни, следователно оптималното решение е x_1 = 0, x_2 = 2, A_2 = 4, s_1 = 0, s_2 = 0. Тъй като решението включва положителна стойност на А_2, задачата няма допустимо решение, тъй като е нарушено второто ограничение:\n\n\\begin{align*}\n& 3 x_1 + 4x_2 -s_2 - A_2 = 12\\\\\n& 3 \\cdot 0 + 4 \\cdot 2 - 0 - 4 = 12\\\\\n& 8 - 4 = 12\n\\end{align*}",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Симплекс алгоритъм</span>"
    ]
  },
  {
    "objectID": "04-Simplex/02-Simplex-Method.html#simplex-infinite",
    "href": "04-Simplex/02-Simplex-Method.html#simplex-infinite",
    "title": "5  Симплекс алгоритъм",
    "section": "5.3 Множество решения",
    "text": "5.3 Множество решения\nРешете задачата с помощта на симплекс алгоритъма.\n\n\\begin{align*}\n& \\max z = 2x_1 + 4x_2 \\\\\n& x_1 + 2x_2  \\leq 5 \\\\\n& x_1 + x_2 \\leq 4 \\\\\n& x_1, x_2 \\geq 0\n\\end{align*}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nТаблица 1\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n2\n4\n0\n0\n\n\n\nБазисни пр.\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\n_\n\n\ns_1\n0\n5\n1\n2\n1\n0\n\n\n\ns_2\n0\n4\n1\n1\n0\n1\n\n\n\nZ\n\nZ_j\n0\n0\n0\n0\n\n\n\n\n\n\\Delta_j\n-2\n-4\n0\n0\n\n\n\n\n\n&lt;- (1) / 2\n&lt;- (2) - (1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nТаблица 2\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n2\n4\n0\n0\n\n\n\nБазисни пр.\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\n_\n\n\nx_2\n4\n5/2\n1/2\n1\n1/2\n0\n\n\n\ns_2\n0\n3/2\n1/2\n0\n-1/2\n1\n\n\n\nZ\n\nZ_j\n2\n4\n2\n0\n\n\n\n\n\n\\Delta_j\n0\n0\n2\n0\n\n\n\n\n\n&lt;- (2) / (1/2)\n&lt;- (1) - (2)/2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nТаблица 3\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n2\n4\n0\n0\n\n\n\nБазисни пр.\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\n_\n\n\nx_2\n4\n1\n0\n1\n1\n-1\n\n\n\nx_1\n2\n3\n1\n0\n-1\n2\n\n\n\nZ\n\nZ_j\n2\n4\n2\n0\n\n\n\n\n\n\\Delta_j\n0\n0\n2\n0\n\n\n\n\nВсички оптимални решения са дадени от:\n\nx^* = \\alpha\n\\begin{pmatrix}\n0 \\\\\n5/2 \\\\\n0 \\\\\n3/2\n\\end{pmatrix} + (1 -\\alpha)\n\\begin{pmatrix}\n3 \\\\\n1 \\\\\n0 \\\\\n0\n\\end{pmatrix},\\quad \\alpha \\in [0, 1]",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Симплекс алгоритъм</span>"
    ]
  },
  {
    "objectID": "04-Simplex/02-Simplex-Method.html#simplex-degenerate",
    "href": "04-Simplex/02-Simplex-Method.html#simplex-degenerate",
    "title": "5  Симплекс алгоритъм",
    "section": "5.4 Изродено решение",
    "text": "5.4 Изродено решение\nРешете задачата с помощта на симплекс алгоритъма.\n\n\\begin{align*}\n& \\max z = x_1 + 3x_2 \\\\\n& x_1 + 4x_2  \\leq 8 \\\\\n& x_1 + 2x_2 \\leq 4 \\\\\n& x_1, x_2 \\geq 0\n\\end{align*}\n\n\n\n\nТаблица 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n\n\n\n\n\n\n\n\nБазисни пр.\nC_B\nX_B\n_\n_\n_\n_\n_\n_\n\n\n\n\n_\n\n\n\n\n\n\n\n\n\n\n_\n\n\n\n\n\n\n\n\nZ\n\nZ_j\n\n\n\n\n\n\n\n\n\n\n\\Delta_j\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nТаблица 1\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n1\n3\n0\n0\n\n\n\nБазисни пр.\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\n_\n\n\ns_1\n0\n8\n1\n4\n1\n0\n\n\n\ns_2\n0\n4\n1\n2\n0\n1\n\n\n\nZ\n\nZ_j\n0\n0\n0\n0\n\n\n\n\n\n\\Delta_j\n-1\n-3\n0\n0\n\n\n\n\n\n&lt;- (2) / 2\n&lt;- (1) - 4(2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nТаблица 2\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_j\n1\n3\n0\n0\n\n\n\nБазисни пр.\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\n_\n\n\ns_1\n0\n0\n-1\n0\n1\n-2\n\n\n\nx_2\n3\n2\n1/2\n1\n0\n1/2\n\n\n\nZ\n\nZ_j\n3/2\n3\n0\n3/2\n\n\n\n\n\n\\Delta_j\n1/2\n0\n0\n3/2\n\n\n\n\nОптималният план е (0, 3, 0, 0), който е изроден, тъй като в него има базисни променливи, които са равни на нула.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Симплекс алгоритъм</span>"
    ]
  },
  {
    "objectID": "05-Duals/01-Duals.html",
    "href": "05-Duals/01-Duals.html",
    "title": "6  Дуални задачи",
    "section": "",
    "text": "6.1 Връзка между решенията на първичната и дуалната задача",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Дуални задачи</span>"
    ]
  },
  {
    "objectID": "05-Duals/01-Duals.html#връзка-между-решенията-на-първичната-и-дуалната-задача",
    "href": "05-Duals/01-Duals.html#връзка-между-решенията-на-първичната-и-дуалната-задача",
    "title": "6  Дуални задачи",
    "section": "",
    "text": "Първична задача\nДуална задача\n\n\n\n\nМножество решения\nИзродено решение\n\n\nЕдно неизродено решение\nЕдно неизродено решение\n\n\nМножество неизродени решения\nЕдно изродено решение\n\n\nЕдно изродено решение\nМножество решения",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Дуални задачи</span>"
    ]
  },
  {
    "objectID": "05-Duals/02-Sensitivity.html",
    "href": "05-Duals/02-Sensitivity.html",
    "title": "7  Анализ на чувствителността (2)",
    "section": "",
    "text": "7.1 Пример дуална задача\nДадена е задачата:\n\\begin{align*}\n\\min z = -x_2 \\\\\nx_1 - x_2 \\leq 1 \\\\\nx_1 + x_2 \\leq 4 \\\\\nx_1 - x_2 \\geq -1 \\\\\nx_1 \\leq 2 \\\\\nx_2 \\leq 2 \\\\\nx_1, x_2 \\geq 0\n\\end{align*}\nи симплекс таблицата в последната итерация на алгоритъма.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Анализ на чувствителността (2)</span>"
    ]
  },
  {
    "objectID": "05-Duals/02-Sensitivity.html#пример-дуална-задача",
    "href": "05-Duals/02-Sensitivity.html#пример-дуална-задача",
    "title": "7  Анализ на чувствителността (2)",
    "section": "",
    "text": "C_J\n0\n1\n0\n0\n0\n0\n0\n\n\nB\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\ns_3\ns_4\ns_5\n\n\ns_1\n0\n2\n0\n0\n1\n0\n1\n0\n0\n\n\ns_2\n0\n1\n0\n0\n0\n1\n1\n0\n-2\n\n\nx_2\n1\n2\n0\n1\n0\n0\n0\n0\n1\n\n\ns_4\n0\n1\n0\n0\n0\n0\n1\n1\n-1\n\n\nx_1\n0\n1\n1\n0\n0\n0\n-1\n0\n1\n\n\nz\n2\nZ_j\n0\n1\n0\n0\n0\n0\n1\n\n\n\n\n\\Delta_j = Z_j - C_j\n0\n0\n0\n0\n0\n0\n1\n\n\n\n\n\n\n\n\n\nРешение\n\n\n\n\n\nВ тази таблица \\Delta_5 = Z_5-C_5=0 и s_3 не е в базиса (т.е. s_3=0).\nТова сочи, че е възможно да съществува повече от едно оптимално решение. Когато сложим s_3 в базиса можем да получим друг оптимум при една и съща стойност на целевата функция.\nТрансформираме таблицата в новия базисен вид:\n\n&lt;- (2)\n&lt;- (1) - (2)\n&lt;- (3)\n&lt;- (4) - (2)\n&lt;- (5) - (2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC_J\n0\n1\n0\n0\n0\n0\n0\n\n\nB\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\ns_3\ns_4\ns_5\n\n\ns_1\n0\n1\n0\n0\n1\n-1\n0\n0\n2\n\n\ns_3\n0\n1\n0\n0\n0\n1\n1\n0\n-2\n\n\nx_2\n1\n2\n0\n1\n0\n0\n0\n0\n1\n\n\ns_4\n0\n0\n0\n0\n0\n-1\n1\n1\n1\n\n\nx_1\n0\n2\n1\n0\n0\n1\n-1\n0\n-1\n\n\nz\n2\nZ_j\n0\n1\n0\n0\n0\n0\n1\n\n\n\n\n\\Delta_j = Z_j - C_j\n0\n0\n0\n0\n0\n0\n1",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Анализ на чувствителността (2)</span>"
    ]
  },
  {
    "objectID": "05-Duals/02-Sensitivity.html#дуална-задача---изродено-решение-на-първичната-задача",
    "href": "05-Duals/02-Sensitivity.html#дуална-задача---изродено-решение-на-първичната-задача",
    "title": "7  Анализ на чувствителността (2)",
    "section": "7.2 Дуална задача - изродено решение на първичната задача",
    "text": "7.2 Дуална задача - изродено решение на първичната задача\nДадена е задачата\n\n\\begin{align}\n& \\max z = 3x1 + 2x2 \\\\\n& x1 + x2 \\leq 10 \\\\\n& x1 \\leq 5 \\\\\n& x2 \\leq 5 \\\\\n& x1,x2 \\geq 0\n\\end{align}\n\nДадени са и таблиците на симплекс алгоритъма\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIteration-2\n\nC_j\n3\n2\n0\n0\n0\nX_B / x_2\n\n\nB\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\ns_3\n\n\n\ns_1\n0\n5\n0\n1\n1\n-1\n0\n\n\n\nx_1\n3\n5\n1\n0\n0\n1\n0\n\n\n\ns_3\n0\n5\n0\n1\n0\n0\n1\n\n\n\nz=15\n\nZ_j\n3\n0\n0\n3\n0\n\n\n\n\n\n\\Delta = Z_j - C_j\n0\n-2\n0\n3\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIteration-3(1)\n\nC_j\n3\n2\n0\n0\n0\n\n\n\nB\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\ns_3\n\n\n\nx_2\n2\n5\n0\n1\n1\n-1\n0\n\n\n\nx_1\n3\n5\n1\n0\n0\n1\n0\n\n\n\ns_3\n0\n0\n0\n1\n-1\n1\n1\n\n\n\nz=15\n\nZ_j\n3\n2\n2\n1\n0\n\n\n\n\n\n\\Delta_j = Z_j - C_j\n0\n0\n2\n1\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIteration-3(2)\n\nC_j\n3\n2\n0\n0\n0\n\n\n\nB\nC_B\nX_B\nx_1\nx_2\ns_1\ns_2\ns_3\n\n\n\ns_1\n0\n0\n_\n_\n_\n_\n_\n\n\n\nx_1\n3\n5\n_\n_\n_\n_\n_\n\n\n\nx_2\n2\n5\n_\n_\n_\n_\n_\n\n\n\nz=15\n\nZ_j\n_\n_\n_\n_\n_\n\n\n\n\n\n\\Delta_j = Z_j - C_j\n0\n0\n0\n3\n2",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Анализ на чувствителността (2)</span>"
    ]
  },
  {
    "objectID": "06-Transportation.html",
    "href": "06-Transportation.html",
    "title": "8  Транспортна задача",
    "section": "",
    "text": "8.1 Балансирана задача\nДадена е таблица с транспортни разходи между три депа (източници) (S_i, i = 1,\n\\ldots, 3) и четири града (дестинации) (D_j, j = 1, \\ldots, 4).\nЦелта на задачата е да се определят количествата x_{ij} превозени от източник i до дестинация j така, че общите транспортни разходи (Таблица 8.1) да са възможно най-ниски.\nОбщите разходи са дадени от\nВ конкретната задача получаваме:\nТази цел трябва да постигнем така, че за всяка дестинация трябва да доставим точно толкова стоки, колкото е търсенето. В същото време от всеки източник не можем да изпратим повече от наличността та (предлагане). Ако запишем превозените количества в матрица (Таблица 8.2), тези ограничения просто означават, че сумите по колоните на матрицата трябва да са равни на търсенето за всички източници и че сумите по редовете трябва да са равни на наличностите в източниците.\nТърсене при дестинация 1:\nx_{11} + x_{21} + x_{31} = 200 \\\\\nТърсене при дестинация 2:\nx_{12} + x_{22} + x_{32} = 225\n Търсене при дестинация 3:\nx_{13} + x_{23} + x_{33} = 275\n Търсене при дестинация 4:\nx_{14} + x_{24} + x_{34} = 150\nНаличност в източник 1:\nx_{11} + x_{12} + x_{13} + x_{14} = 250\nНаличност в източник 2:\nx_{21} + x_{22} + x_{23} + x_{24} = 200\nНаличност в източник 3:\nx_{31} + x_{32} + x_{33} + x_{34} = 250\nЦялата транспортна задача е:\n\\begin{align*}\n\\min z = 18x_{11} + 13x_{12} + 17x_{13} + 14x_{14} + \\\\\n16x_{21} + 18x_{22} + 14x_{23} + 10x_{24} + \\\\\n21x_{31} + 24x_{32} + 13x_{33} + 10x_{34}\n\\end{align*}\nПри ограничения:\n\\begin{align*}\n& x_{11} + x_{21} + x_{31} = 200 \\\\\n& x_{12} + x_{22} + x_{32} = 225 \\\\\n& x_{13} + x_{23} + x_{33} = 275 \\\\\n& x_{14} + x_{24} + x_{34} = 150 \\\\\n& x_{11} + x_{12} + x_{13} + x_{14} = 250 \\\\\n& x_{21} + x_{22} + x_{23} + x_{24} = 200 \\\\\n& x_{31} + x_{32} + x_{33} + x_{34} = 400\n\\end{align*}\nРешение на задачата в Excel можете да изтеглите от тук\nПокажи\nimport gurobipy as gp\nfrom gurobipy import GRB\n\n# Creates a list of all the supply nodes\nsources = [1, 2, 3]\ndestinations = [1, 2, 3, 4]\n\n# Creates a dictionary for the number of units of supply for each supply node\nsupply = {\n    1: 250,\n    2: 200,\n    3: 400\n}\n\ndemand = {\n    1: 200,\n    2: 225,\n    3: 275,\n    4: 150\n}\n\ntransp_costs = {\n    (1, 1): 18,\n    (1, 2): 13,\n    (1, 3): 17,\n    (1, 4): 14,\n    (2, 1): 16,\n    (2, 2): 18,\n    (2, 3): 14,\n    (2, 4): 10,\n    (3, 1): 21,\n    (3, 2): 24,\n    (3, 3): 13,\n    (3, 4): 10\n}\n\nmod = gp.Model(\"Transportation problem\")\nmod.Params.LogToConsole = 0\n\nroutes = mod.addVars(transp_costs.keys(), obj=transp_costs, name=\"route\")\n\nmod.addConstrs((routes.sum(i,'*') == supply[i] for i in sources), name='supply')\nmod.addConstrs((routes.sum('*',j) == demand[j] for j in destinations), name='demand')\n\nmod.ModelSense = GRB.MINIMIZE\nmod.optimize()\n\nfor v in mod.getVars():\n    print('%s = %g' % (v.varName, v.x))\n\nprint('Objective: %g' % mod.objVal)",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Транспортна задача</span>"
    ]
  },
  {
    "objectID": "06-Transportation.html#балансирана-задача",
    "href": "06-Transportation.html#балансирана-задача",
    "title": "8  Транспортна задача",
    "section": "",
    "text": "Таблица 8.1: Транспортни разходи\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD_1\nD_2\nD_3\nD_4\n\nПредлагане\n\n\n\n\nS_1\n18\n13\n17\n14\n\n250\n\n\nS_2\n16\n18\n14\n10\n\n200\n\n\nS_3\n21\n24\n13\n10\n\n400\n\n\n\n\n\n\n\n\n\n\n\nТърсене\n200\n225\n275\n150\n\n\n\n\n\n\n\n\n\n\n\\begin{aligned}\n\\sum_{i = 1}^{3} \\sum_{j = 1}^{4} c_{ij}x_{ij} = & c_{11}x_{11} + c_{12}x_{12} + c_{13}x_{13} + c_{14}x_{14} + \\\\\n& c_{21}x_{21} + c_{22}x_{22} + c_{23}x_{23} + c_{24}x_{24} + \\\\\n& c_{31}x_{31} + c_{32}x_{32} + c_{33}x_{33} + c_{34}x_{34}\n\\end{aligned}\n\n\\begin{aligned}\n\\sum_{i = 1}^{3} \\sum_{j = 1}^{4} c_{ij}x_{ij} = & 18x_{11} + 13x_{12} + 17x_{13} + 14x_{14} +  \\\\\n& 16x_{21} + 18x_{22} + 14x_{23} + 10x_{24} + \\\\\n& 21x_{31} + 24x_{32} + 13x_{33} + 10x_{34}\n\\end{aligned}\n\n\n\n\nТаблица 8.2: Количества от източник към дестинация\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD_1\nD_2\nD_3\nD_4\n\nПредлагане\n\n\n\n\nS_1\nx_{11}\nx_{12}\nx_{13}\nx_{14}\n\n\\sum_{j = 1}^4 x_{1j} = 250\n\n\nS_2\nx_{21}\nx_{22}\nx_{23}\nx_{24}\n\n\\sum_{j = 1}^4 x_{2j} = 200\n\n\nS_3\nx_{31}\nx_{32}\nx_{33}\nx_{34}\n\n\\sum_{j = 1}^4 x_{3j} = 400\n\n\n\n\n\n\n\n\n\n\n\nТърсене\n\\sum_{i = 1}^3 x_{i1} = 200\n\\sum_{i = 1}^3 x_{i2} = 225\n\\sum_{i = 1}^3 x_{i3} = 275\n\\sum_{i = 1}^3 x_{i4} = 150",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Транспортна задача</span>"
    ]
  },
  {
    "objectID": "06-Transportation.html#предлагане-надвишаващо-търсенето",
    "href": "06-Transportation.html#предлагане-надвишаващо-търсенето",
    "title": "8  Транспортна задача",
    "section": "8.2 Предлагане надвишаващо търсенето",
    "text": "8.2 Предлагане надвишаващо търсенето\nДадена е таблица с транспортни разходи между три депа (източници) (S_i, i = 1,\n\\ldots, 3) и четири града (дестинации) (D_j, j = 1, \\ldots, 4).\n\n\n\n\n\n\n\n\n\n\n\n\n\nD_1\nD_2\nD_3\nD_4\n\nПредлагане\n\n\n\n\nS_1\n18\n13\n17\n14\n\n250\n\n\nS_2\n16\n18\n14\n10\n\n200\n\n\nS_3\n21\n24\n13\n10\n\n500\n\n\n\n\n\n\n\n\n\n\n\nТърсене\n200\n225\n275\n150\n\n\n\n\n\nДобавяме фиктивна дестинация (потребител)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD_1\nD_2\nD_3\nD_4\nD_5\n\nПредлагане\n\n\n\n\nS_1\n18\n13\n17\n14\n0\n\n250\n\n\nS_2\n16\n18\n14\n10\n0\n\n200\n\n\nS_3\n21\n24\n13\n10\n0\n\n500\n\n\n\n\n\n\n\n\n\n\n\n\nТърсене\n200\n225\n275\n150\n100\n\n\n\n\n\nРазходите за транспорт до този фиктивен потребител са равни на нула. Наличието на фиктивен потребител не променя структурата на задачата и тя е:\n\\begin{align*}\n\\min \\sum_{i = 1}^3 \\sum_{j = 1}^{5} c_{ij}x_{ij} = & c_{11}x_{11} + c_{12}x_{12} + c_{13}x_{13} + c_{14}x_{14} + c_{15}x_{15} + \\\\\n& c_{21}x_{21} + c_{22}x_{22} + c_{23}x_{23} + c_{24}x_{24} + c_{25}x_{25} + \\\\\n& c_{31}x_{31} + c_{32}x_{32} + c_{33}x_{33} + c_{34}x_{34} + c_{35}x_{35} = \\\\\n& 18x_{11} + 13x_{12} + 17x_{13} + 14x_{14} + 0x_{15} + \\\\\n& 16x_{21} + 18x_{22} + 14x_{23} + 10x_{24} + 0x_{25} + \\\\\n& 21x_{31} + 24x_{32} + 13x_{33} + 10x_{34} + 0 x_{35}\n\\end{align*}\nПри ограничения\n\\begin{align*}\n& x_{11} + x_{12} + x_{13} + x_{14} + x_{15} = 250 \\quad \\text{Предлагане 1} \\\\\n& x_{22} + x_{22} + x_{23} + x_{24} + x_{25} = 200 \\quad \\text{Предлагане 2} \\\\\n& x_{32} + x_{32} + x_{33} + x_{34} + x_{35} = 500 \\quad \\text{Предлагане 3} \\\\\n& x_{11} + x_{21} + x_{31} = 200 \\quad \\text{Търсене 1} \\\\\n& x_{12} + x_{22} + x_{32} = 225 \\quad \\text{Търсене 2} \\\\\n& x_{13} + x_{23} + x_{33} = 275 \\quad \\text{Търсене 3} \\\\\n& x_{14} + x_{24} + x_{34} = 150 \\quad \\text{Търсене 4} \\\\\n& x_{15} + x_{25} + x_{35} = 100 \\quad \\text{Търсене 5} \\\\\n\\end{align*}\nРешение в excel можете да свалите тук\n\n\nПокажи\nimport gurobipy as gp\nfrom gurobipy import GRB\n\n# Creates a list of all the supply nodes\nsources = [1, 2, 3]\ndestinations = [1, 2, 3, 4, 5]\n\n# Creates a dictionary for the number of units of supply for each supply node\nsupply = {\n    1: 250,\n    2: 200,\n    3: 500\n}\n\ndemand = {\n    1: 200,\n    2: 225,\n    3: 275,\n    4: 150,\n    5: 100\n}\n\ntransp_costs = {\n    (1, 1): 18,\n    (1, 2): 13,\n    (1, 3): 17,\n    (1, 4): 14,\n    (2, 1): 16,\n    (2, 2): 18,\n    (2, 3): 14,\n    (2, 4): 10,\n    (3, 1): 21,\n    (3, 2): 24,\n    (3, 3): 13,\n    (3, 4): 10,\n    (1, 5): 0,\n    (2, 5): 0,\n    (3, 5): 0    \n}\n\nmod1 = gp.Model(\"Transportation problem (excess supply)\")\nmod1.Params.LogToConsole = 0\n\nroutes = mod1.addVars(transp_costs.keys(), obj=transp_costs, name=\"route\")\n\nmod1.addConstrs((routes.sum(i,'*') == supply[i] for i in sources), name='supply')\nmod1.addConstrs((routes.sum('*',j) == demand[j] for j in destinations), name='demand')\n\nmod1.ModelSense = GRB.MINIMIZE\nmod1.optimize()\n\nfor v in mod1.getVars():\n    print('%s = %g' % (v.varName, v.x))\n\nprint('Objective: %g' % mod1.objVal)\n\n\nroute[1,1] = 0\nroute[1,2] = 225\nroute[1,3] = 0\nroute[1,4] = 0\nroute[2,1] = 200\nroute[2,2] = 0\nroute[2,3] = 0\nroute[2,4] = 0\nroute[3,1] = 0\nroute[3,2] = 0\nroute[3,3] = 275\nroute[3,4] = 150\nroute[1,5] = 25\nroute[2,5] = 0\nroute[3,5] = 75\nObjective: 11200\n\n\nКои източници не успяват да доставят цялата си наличност? Поглеждаме кои източници доставят на фиктивния потребител j = 5. В настоящото решение това са S_1 и S_3. Ако по някаква причина искаме оптимум при условие, че първият източник доставя цялата си наличност можем да поставим висока цена на доставка към фиктивната дестинация. Следващото решение показва оптимумът, когато цената за доставка от S_1 към D_5 e 100.\n\n\nПокажи\nimport gurobipy as gp\nfrom gurobipy import GRB\n\n# Creates a list of all the supply nodes\nsources = [1, 2, 3]\ndestinations = [1, 2, 3, 4, 5]\n\n# Creates a dictionary for the number of units of supply for each supply node\nsupply = {\n    1: 250,\n    2: 200,\n    3: 500\n}\n\ndemand = {\n    1: 200,\n    2: 225,\n    3: 275,\n    4: 150,\n    5: 100\n}\n\ntransp_costs = {\n    (1, 1): 18,\n    (1, 2): 13,\n    (1, 3): 17,\n    (1, 4): 14,\n    (2, 1): 16,\n    (2, 2): 18,\n    (2, 3): 14,\n    (2, 4): 10,\n    (3, 1): 21,\n    (3, 2): 24,\n    (3, 3): 13,\n    (3, 4): 10,\n    (1, 5): 100,\n    (2, 5): 0,\n    (3, 5): 0    \n}\n\nmod2 = gp.Model(\"Transportation problem (excess supply)\")\nmod2.Params.LogToConsole = 0\n\nroutes = mod2.addVars(transp_costs.keys(), name=\"route\", vtype=GRB.CONTINUOUS, lb=0)\n\nmod2.setObjective(gp.quicksum(transp_costs[i,j]*routes[i,j] for i,j in transp_costs.keys()), GRB.MINIMIZE)\n\nmod2.addConstrs((routes.sum(i,'*') == supply[i] for i in sources), name='supply')\nmod2.addConstrs((routes.sum('*',j) == demand[j] for j in destinations), name='demand')\n\nmod2.ModelSense = GRB.MINIMIZE\nmod2.optimize()\n\nfor v in mod2.getVars():\n    print('%s = %g' % (v.varName, v.x))\n    \nprint('Objective: %g' % mod2.objVal)\n\n\nroute[1,1] = 25\nroute[1,2] = 225\nroute[1,3] = 0\nroute[1,4] = 0\nroute[2,1] = 175\nroute[2,2] = 0\nroute[2,3] = 0\nroute[2,4] = 0\nroute[3,1] = 0\nroute[3,2] = 0\nroute[3,3] = 275\nroute[3,4] = 150\nroute[1,5] = 0\nroute[2,5] = 25\nroute[3,5] = 75\nObjective: 11250\n\n\n\nУпражнение 8.1 (Транспортна задача) Autoparts AG разполага с три завода в Мюнхен, Хамбурт и Бремен и с два големи центъра за дистрибуция в Берлин и в Хановер. Тримесечният капацитет на трите завода е 1000, 1500 и 500 автомобила, а търсенето в двата дистрибуторски центъра за същия период е 2300 и 1400 автомобила. Диаграмата на разстоянията между заводите и разпределителните центрове е дадена в Таблица 8.3.\n\n\n\nТаблица 8.3: Разстояния между заводи и дистрибуторски центрове\n\n\n\n\n\n\nБерлин\nХановер\n\n\n\n\nМюнхен\n500\n480\n\n\nХамбург\n250\n130\n\n\nБремен\n200\n100\n\n\n\n\n\n\nТранспортните разходи между заводите и дистрибуторските центрове са 8 евроцента на автомобил и километър. Формулирайте целевата функция в евро, както и ограниченията на транспортната задача.\nФормулирайте математически модел, която да намери този оптимум.\n\n\nУпражнение 8.2 (Транспортна задача) Предприятие произвежда туристически раници. Търсенето на нейния продукт през пиковия период от март до юни всяка година е съответно 100, 200, 180 и 300 единици. Дружеството използва работници на непълно работно време, за да посрещне колебанията в търсенето. Знаем, че, предприятието може да произведе 50, 180, 280 и 270 единици в периода от март до юни. Търсенето през текущия месец може да бъде посрещнато по един от три начина:\n\nПроизводството за текущия месец на цена от 40 USD на раница\nИзлишък на продукция през по-ранен месец при допълнителни разходи за складиране от $0.50 на раница на месец.\nИзлишък на продукция през по-късен месец (обратно поръчване) при допълнителни наказателни разходи от $2.00 на раница на месец.\n\nПредприятието търси да определи оптималния производствен график за четирите месеца. Формулирайте транспортна задача, която да намери този оптимум.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Транспортна задача</span>"
    ]
  },
  {
    "objectID": "06-Transportation.html#първоначален-опорен-план",
    "href": "06-Transportation.html#първоначален-опорен-план",
    "title": "8  Транспортна задача",
    "section": "8.3 Първоначален опорен план",
    "text": "8.3 Първоначален опорен план\n\n8.3.1 Метод на северозападния ъгъл\n\n\n\n\nD_1\nD_2\nD_3\nD_4\nПредлагане\n\n\n\n\nS_1\n0\n0\n0\n0\n300\n\n\nS_2\n0\n0\n0\n0\n500\n\n\nS_3\n0\n0\n0\n0\n400\n\n\nТърсене\n100\n700\n50\n350\n\n\n\n\n\n\n\n\nD_1\nD_2\nD_3\nD_4\nПредлагане\n\n\n\n\nS_1\n100\n0\n0\n0\n200\n\n\nS_2\n0\n0\n0\n0\n500\n\n\nS_3\n0\n0\n0\n0\n400\n\n\nТърсене\n0\n700\n50\n350\n\n\n\n\n\n\n\n\nD_1\nD_2\nD_3\nD_4\nПредлагане\n\n\n\n\nS_1\n100\n200\n0\n0\n0\n\n\nS_2\n0\n0\n0\n0\n500\n\n\nS_3\n0\n0\n0\n0\n400\n\n\nТърсене\n0\n500\n50\n350\n\n\n\n\n\n\n\n\nD_1\nD_2\nD_3\nD_4\nПредлагане\n\n\n\n\nS_1\n100\n200\n0\n0\n0\n\n\nS_2\n0\n500\n0\n0\n0\n\n\nS_3\n0\n0\n0\n0\n400\n\n\nТърсене\n0\n0\n50\n350\n\n\n\n\n\n\n\n\nD_1\nD_2\nD_3\nD_4\nПредлагане\n\n\n\n\nS_1\n100\n200\n0\n0\n0\n\n\nS_2\n0\n500\n0\n0\n0\n\n\nS_3\n0\n0\n500\n0\n350\n\n\nТърсене\n0\n0\n0\n350\n\n\n\n\n\n\n\n\nD_1\nD_2\nD_3\nD_4\nПредлагане\n\n\n\n\nS_1\n100\n200\n0\n0\n0\n\n\nS_2\n0\n500\n0\n0\n0\n\n\nS_3\n0\n0 (0)\n500\n350\n0\n\n\nТърсене\n0\n0\n0\n0\n\n\n\n\n\n\n8.3.2 Най-ниски разходи\n\n\n\n\nD_1\nD_2\nD_3\nD_4\nПредлагане\n\n\n\n\nS_1\n3\n8\n7\n12\n300\n\n\nS_2\n13\n10\n5\n9\n500\n\n\nS_3\n2\n1\n14\n15\n400\n\n\nТърсене\n100\n700\n50\n350\n\n\n\n\nНай-ниските транспортни разходи намираме в маршрута S_3 \\to D_2. Най-голямото количество, което можем да превозим по този маршрут е дадено от минимума между търсене и предлагане: \\min(400, 700) = 400.\n\n\n\n\nD_1\nD_2\nD_3\nD_4\nПредлагане\n\n\n\n\nS_1\n3\n8\n7\n12\n300\n\n\nS_2\n13\n10\n5\n9\n500\n\n\nS_3\n2\n1 (400)\n14\n15\n0\n\n\nТърсене\n100\n300\n50\n350\n\n\n\n\nСледващият маршрут с най-ниски разходи е S_1 \\to D_1 (маршрутът S_3 \\ to D_1 има по-ниски транспортни разходи, но предлагането от третия източник е изчерпано). Най-голямото количество, което можем да превозим по този маршрут е \\min(300, 100) = 100\n\n\n\n\n\n\n\n\n\n\n\n\nD_1\nD_2\nD_3\nD_4\nПредлагане\n\n\n\n\nS_1\n3 (100)\n8\n7\n12\n200\n\n\nS_2\n13\n10\n5\n9\n500\n\n\nS_3\n2\n1 (400)\n14\n15\n0\n\n\nТърсене\n0\n300\n50\n350\n\n\n\n\nСледващият маршрут с най-ниски разходи е S_2 \\to D_3. Най-голямото количество, което можем да превозим по този маршрут е \\min(500, 50) = 50\n\n\n\n\n\n\n\n\n\n\n\n\nD_1\nD_2\nD_3\nD_4\nПредлагане\n\n\n\n\nS_1\n3 (100)\n8\n7\n12\n200\n\n\nS_2\n13\n10\n5 (50)\n9\n450\n\n\nS_3\n2\n1 (400)\n14\n15\n0\n\n\nТърсене\n0\n300\n0\n350\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD_1\nD_2\nD_3\nD_4\nПредлагане\n\n\n\n\nS_1\n3 (100)\n8 (200)\n7\n12\n0\n\n\nS_2\n13\n10\n5 (50)\n9 (350)\n150\n\n\nS_3\n2\n1 (400)\n14\n15\n0\n\n\nТърсене\n0\n100\n0\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD_1\nD_2\nD_3\nD_4\nПредлагане\n\n\n\n\nS_1\n3 (100)\n8 (200)\n7\n12\n0\n\n\nS_2\n13\n10 (100)\n5 (50)\n9 (350)\n0\n\n\nS_3\n2\n1 (400)\n14\n15\n0\n\n\nТърсене\n0\n0\n0\n0",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Транспортна задача</span>"
    ]
  },
  {
    "objectID": "06-Transportation.html#изроден-първоначален-план",
    "href": "06-Transportation.html#изроден-първоначален-план",
    "title": "8  Транспортна задача",
    "section": "8.4 Изроден първоначален план",
    "text": "8.4 Изроден първоначален план\n\n\n\n\n\n\n\n\n\n\n\n\nD_1\nD_2\nD_3\nD_4\nПредлагане\n\n\n\n\nS_1\n2 (10)\n5 (50)\n1\n2\n60\n\n\nS_2\n8\n1\n2 (30)\n4\n30\n\n\nS_3\n6\n2 (400)\n2\n9 (10)\n10\n\n\nТърсене\n10\n50\n30\n10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD_1\nD_2\nD_3\nD_4\nПредлагане\n\n\n\n\nS_1\n2 (10)\n5 (50)\n1\n2\n60\n\n\nS_2\n8 (0)\n1\n2 (30)\n4\n30\n\n\nS_3\n6\n2 (400)\n2 (0)\n9 (10)\n10\n\n\nТърсене\n10\n50\n30\n10",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Транспортна задача</span>"
    ]
  },
  {
    "objectID": "00-Assignments/assignments.html",
    "href": "00-Assignments/assignments.html",
    "title": "9  Задачи",
    "section": "",
    "text": "9.1 Банкови заеми\nБанка е в процеса на определяне на кредитната си политика за пет различни сектора с характеристики дадени в следната таблица:\nБанката разполага с общо 12 милиона лева и при определяне на политиката трябва да се съобрази със следните регулации:\nКакъв е оптималният (най-висока печалба) план за банката?\nПокажи\n# Create a new model\nm = gp.Model(\"mip1\")\nm.params.LogToConsole = 0\n\n# Create variables\nx_cons = m.addVar(name=\"Consumer\")\nx_auto = m.addVar(name=\"Automobile\")\nx_home = m.addVar(name=\"Home\")\nx_agri = m.addVar(name=\"Agriculture\")\nx_comm = m.addVar(name=\"Commercial\")\n\n# Set objective\n\ninterest = 0.015 * (1 - 0.1) * x_cons + 0.13 * (1 - 0.07) * x_auto + 0.12 * (1 - 0.03) * x_home + 0.125 * (\n            1 - 0.05) * x_agri + 0.1 * (1 - 0.02) * x_comm\ndefaults = 0.1 * x_cons + 0.07 * x_auto + 0.03 * x_home + 0.05 * x_agri + 0.02 * x_comm\n\nm.setObjective(interest - defaults, GRB.MAXIMIZE)\n\n# Constraints\n\nx_all = gp.quicksum([x_cons, x_auto, x_home, x_agri, x_comm])\n\nm.addConstr(x_all &lt;= 12, \"Credit Limit\")\nm.addConstr(x_agri + x_comm &gt;= 0.4 * x_all, \"Agriculture and Commercial Loans &gt;= 40%\")\nm.addConstr(x_home &gt;= 0.5 * (x_cons + x_auto + x_home), \"Home Loans &gt;= 50% of Consumer, Automobile, and Home Loans\")\nm.addConstr(defaults &lt;= 0.04 * x_all, \"Defaults &lt;= 4% of Total Loans\")\n\nm.optimize()\n\nvars_df = pd.DataFrame(columns=[\"Variable\", \"Value\", \"RC\"], data=[(var.varName, var.x, var.RC) for var in m.getVars()])\nconstr_df = pd.DataFrame(columns=[\"Constraint\", \"Slack\", \"Dual\"],\n                         data=[(constr.constrName, constr.slack, constr.pi) for constr in m.getConstrs()])\n\n\nRestricted license - for non-production use only - expires 2025-11-24\nПокажи\nvars_df\n\n\n\n\nТаблица 9.1: Стойности на променливите в оптимума за банковите заеми\n\n\n\n\n\n\n\n\n\n\nVariable\nValue\nRC\n\n\n\n\n0\nConsumer\n0.0\n-0.17290\n\n\n1\nAutomobile\n0.0\n-0.03550\n\n\n2\nHome\n7.2\n0.00000\n\n\n3\nAgriculture\n0.0\n-0.00925\n\n\n4\nCommercial\n4.8\n0.00000\nПокажи\nconstr_df\n\n\n\n\nТаблица 9.2: Ограничения за банковите заеми в оптимума за банковите заеми\n\n\n\n\n\n\n\n\n\n\nConstraint\nSlack\nDual\n\n\n\n\n0\nCredit Limit\n0.000\n0.08304\n\n\n1\nAgriculture and Commercial Loans &gt;= 40%\n0.000\n-0.00840\n\n\n2\nHome Loans &gt;= 50% of Consumer, Automobile, and...\n-3.600\n0.00000\n\n\n3\nDefaults &lt;= 4% of Total Loans\n0.168\n0.00000",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Задачи</span>"
    ]
  },
  {
    "objectID": "00-Assignments/assignments.html#банкови-заеми",
    "href": "00-Assignments/assignments.html#банкови-заеми",
    "title": "9  Задачи",
    "section": "",
    "text": "Вид кредит\nЛихва\nДял на несъбираеми кредити\n\n\n\n\nПотребителски\n0.15\n0.10\n\n\nАвтомобили\n0.13\n0.07\n\n\nНедвижими имоти\n0.12\n0.03\n\n\nЗемеделие\n0.125\n0.05\n\n\nТърговия\n0.10\n0.02\n\n\n\n\n\nПоне 40% от заемите трябва да са за земеделие или търговия.\nЗаеми за недвижими имоти трябва да са поне половината от общата сума на потребителски кредити, кредити свързани с автомобили и недвижими имоти.\nПо силата на регулаторни изисквания дялът на несъбираемите кредити не трябва да надвишава 4% от всички кредити. Несъбираемите кредити не носят лихви.\n\n\n\n\n\n\n\n\nМатематически модел\n\n\n\n\n\n\n\\begin{align*}\nx_{п} & : \\text{потребителски кредити в млн. лв.} \\\\\nx_{а} & : \\text{кредити за автомобили в млн. лв.} \\\\\nx_{н} & : \\text{жилищни кредити (недвижими имоти) в млн. лв.} \\\\\nx_{з} & : \\text{земеделски кредити в млн. лв.} \\\\\nx_{т} & : \\text{търговски кредити в млн. лв.}\n\\end{align*}\n\nОтчитайки, че несъбираемите кредити не носят лихви, общата лихва възлиза на\n\n\\begin{align*}\n\\text{лихви} = & 0.15(1 - 0.1)x_{п} + \\\\\n               & 0.13(1 - 0.07)x_{а} + \\\\\n               & 0.12(1 - 0.03)x_{н} + \\\\\n               & 0.125(1 - 0.05)x_{з} + \\\\\n               & 0.10(1 - 0.02)x_{т}\n\\end{align*}\n\nНесъбираемите кредити възлизат на\n\nx_{\\text{несъбираеми}} = 0.10x_{п} + 0.07x_{а} + 0.03x_{н} + 0.05x_{з} + 0.02x_{т}\n\nЦелевата функция е разликата от лихвите и несъбираемите кредити\n\n\\max \\text{лихви} - x_{\\text{несъбираеми}}\n\nОграниченията в задачата са 5:\n\nОбщият обем на отпуснатите кредити да не надвишава 12 млн. лв.\n\n\nx_\\text{общо} = x_{п} + x_{а} + x_{н} + x_{з} + x_{т} \\leq 12\n\n\nПоне 40% от кредитите да са насочени към търговския сектор\n\n\nx_{т} + x_{з} \\geq 0.4x_\\text{общо}\n\n\nКредитите за недвижими имоти да са поне половината от общата сума на потребителски кредити, кредити свързани с автомобили и недвижими имоти\n\n\nx_{н} \\geq \\frac{1}{2}(x_{п} + x_{а} + x_{н})\n\n\nДялът на несъбираемите кредити не трябва да надвишава 4% от всички кредити\n\n\nx_{\\text{несъбираеми}} \\leq 0.04x_\\text{общо}\n\n\nНеотрицателност на кредитите\n\n\nx_{п}, x_{а}, x_{н}, x_{з}, x_{т} \\geq 0",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Задачи</span>"
    ]
  },
  {
    "objectID": "00-Assignments/assignments.html#планиране-на-градско-строителство",
    "href": "00-Assignments/assignments.html#планиране-на-градско-строителство",
    "title": "9  Задачи",
    "section": "9.2 Планиране на градско строителство",
    "text": "9.2 Планиране на градско строителство\nДа приемем, че София е изправена пред дефицит в местния бюджет и общинският съвет обмисля как да увеличи приходите от данък сгради чрез преустройства на общински имоти. Проектът се състои от две части – разчистване на занемарени и повредени постройки и построяване на нови жилища.\n\nВ момента на планиране общината притежава 300 занемарени постройки, които могат да бъдат съборени. Всяка от тях освобождава 1000 кв. метра и събарянето й струва 3 000 лв. на постройка. 15 процента от освободеното пространство е предвидено за улици, тротоари и свободни пространства.\nНа освободените парцели общината може да построи четири вида нови жилищни сгради: еднофамилни (300 кв. метра), двуфамилни (500 кв. метра), три-фамилни (700 кв. метра) и четири-фамилни къщи (900 кв. метра). Очакваните данъчни постъпления са съответно 1 000 лв., 1 700 лв., 2 400 лв. и 2 800 лв. на година.\nПоне 20 процента от новите постройки трябва да са еднофамилни къщи, двуфамилните домове трябва да съставляват поне 20 процента, а три и четири-фамилните домове трябва (заедно) да са поне една четвърт от всички нови постройки.\nСтроителните разходи за новите домове са съответно 50 000 лв., 70 000 лв., 130 000 лв. и 160 000 лв.\nОбщината предвижда на финансира проекта чрез банков заем, който не може да надвишава 15 милиона лева.\n\nКолко от всеки вид къщи трябва да планира да построи общината, така че да постигне възможно най-високи данъчни постъпления?\n\n\n\n\n\n\nМатематически модел\n\n\n\n\n\nПроменливи\n\n\\begin{align*}\nx_{single} & : \\text{брой еднофамилни къщи} \\\\\nx_{double} & : \\text{брой двуфамилни къщи} \\\\\nx_{triple} & : \\text{брой трифамилни къщи} \\\\\nx_{quad} & : \\text{брой четирифамилни къщи} \\\\\nx_{dem} & : \\text{брой съборени постройки}\n\\end{align*}\n\nЦелева функция (в хиляди лева)\n\n\\max x_{single} + 1.7x_{double} + 2.4x_{triple} + 2.8x_{quad}\n\nОграничения\n\nПлощ\n\n\n300x_{single} + 500x_{double} + 700x_{triple} + 900x_{quad} x_{dem} \\leq (1 - 0.15) \\cdot 1000 \\cdot x_{dem}\n\n\nБрой съборени постройки\n\n\nx_{dem} \\leq 300\n\n\nСъотношения между видовете нови къщи \nx_{all} = x_{single} + x_{double} + x_{triple} + x_{quad}\n\n\n\n\\begin{align*}\nx_{single} \\geq 0.2 x_{all} \\\\\nx_{double} \\geq 0.2 x_{all} \\\\\nx_{tripple} + x_{quad} \\geq 0.25 x_{all}\n\\end{align*}\n\n\nФинансови ограничения (в хиляди лева) \n50x_{single} + 70x_{double} + 130x_{triple} + 160x_{quad} + 3x_{dem} \\leq 15000\n\n\n\n\n\n\n\nПокажи\nm = gp.Model(\"Urban Planning\")\nm.params.LogToConsole = 0\n\n# Create variables\nsingle = m.addVar(name=\"Single\")\ndbl = m.addVar(name=\"Double\")\ntrpl = m.addVar(name=\"Triple\")\nquad = m.addVar(name=\"Quadruple\")\ndem = m.addVar(name=\"Demolished\")\n\n# Set objective\nm.setObjective(single + 1.7 * dbl + 2.4 * trpl + 2.8 * quad, GRB.MAXIMIZE)\n\n# Add constraints\nm.addConstr(300 * single + 500 * dbl + 700 * trpl + 900 * quad - 850 * dem &lt;= 0, \"Area\")\nm.addConstr(dem &lt;= 300, \"Demolitions\")\nm.addConstr(-0.8 * single + 0.2 * dbl + 0.2 * trpl + 0.2 * quad &lt;= 0, \"Single\")\nm.addConstr(0.1 * single - 0.9 * dbl + 0.1 * trpl + 0.1 * quad &lt;= 0, \"Double\")\nm.addConstr(0.25 * single + 0.25 * dbl - 0.75 * trpl - 0.75 * quad &lt;= 0, \"Triple/Quadruple\")\nm.addConstr(50 * single + 70 * dbl + 130 * trpl + 160 * quad + 3 * dem &lt;= 15000, \"Budget\")\n\n# Optimize model\nm.optimize()\n\n# Print results\nprint('Model Status:', m.status)\nprint('Objective:', m.objVal)\n\nvar_df = pd.DataFrame(columns=['Variable', 'Value', 'RC'], data=[(v.VarName, v.X, v.RC) for v in m.getVars()])\nconstr_df = pd.DataFrame(columns=['Constraint', 'Shadow Price', 'Lower', 'Upper'],\n                         data=[(c.ConstrName, c.Pi, c.SARHSLow, c.SARHSUp) for c in m.getConstrs()])\n\n\nModel Status: 2\nObjective: 314.3115942028985\n\n\n\n\nПокажи\nvar_df\n\n\n\n\nТаблица 9.3: Стойности на променливите в оптимума за градското строителство\n\n\n\n\n\n\n\n\n\n\nVariable\nValue\nRC\n\n\n\n\n0\nSingle\n36.231884\n0.000000\n\n\n1\nDouble\n99.637681\n0.000000\n\n\n2\nTriple\n45.289855\n0.000000\n\n\n3\nQuadruple\n0.000000\n-0.243414\n\n\n4\nDemolished\n108.695652\n0.000000\n\n\n\n\n\n\n\n\n\n\n\n\nПокажи\nconstr_df\n\n\n\n\nТаблица 9.4: Ограничения за градското строителство в оптимума за градското строителство\n\n\n\n\n\n\n\n\n\n\nConstraint\nShadow Price\nLower\nUpper\n\n\n\n\n0\nArea\n0.000074\n-166222.222222\n9.444444e+04\n\n\n1\nDemolitions\n0.000000\n108.695652\ninf\n\n\n2\nSingle\n0.266127\n-91.858790\n3.450609e+01\n\n\n3\nDouble\n0.000000\n-81.521739\ninf\n\n\n4\nTriple/Quadruple\n0.572038\n-61.298077\n5.545407e+01\n\n\n5\nBudget\n0.020954\n0.000000\n4.140000e+04",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Задачи</span>"
    ]
  },
  {
    "objectID": "00-Assignments/assignments.html#производство-и-неустойки",
    "href": "00-Assignments/assignments.html#производство-и-неустойки",
    "title": "9  Задачи",
    "section": "9.3 Производство и неустойки",
    "text": "9.3 Производство и неустойки\nМалък шивашки цех се опитва да определи производствения си план за следващия сезон. Цехът произвежда четири продукта: якета, шапки, ръкавици и панталони, които се произвеждат в четири отделения: рязане, уплътняване, шиене и пакетиране.\n\n\n\n\n\n\n\n\n\n\n\nОтделения/продукти\nЯкета\nШапки\nРъкавици\nПанталони\nКапацитет (часове)\n\n\n\n\nРязане\n0.3\n0.3\n0.25\n0.15\n1000\n\n\nУплътняване\n0.25\n0.35\n0.3\n0.10\n1000\n\n\nШиене\n0.45\n0.5\n0.4\n0.22\n1000\n\n\nПакетиране\n0.12\n0.15\n0.1\n0.05\n1000\n\n\n\nЦехът вече има получени поръчки за четирите продукта. Договорите за производство включват неустойка за всяка недоставена единица:\n\n\n\nОтделения/продукти\nЯкета\nШапки\nРъкавици\nПанталони\n\n\n\n\nПоръчки (брой)\n800\n750\n600\n600\n\n\nПечалба (лв./брой)\n30\n40\n20\n10\n\n\nНеустойка (лв./брой)\n15\n20\n10\n8\n\n\n\nНамерете оптималния производствен план за този цех.\n\n\n\n\n\n\nМатематически модел\n\n\n\n\n\n\n\\begin{align}\nx_{jackets} & : \\text{брой якета} \\\\\nx_{hats} & : \\text{брой шапки} \\\\\nx_{gloves} & : \\text{брой ръкавици} \\\\\nx_{pants} & : \\text{брой панталони}\n\\end{align}\n\nОбщата печалба от производството е равна на печалбата от продажбата на минус разходите за неустойки:\nПечалбата от продажба е равна на количествата произведени продукти умножени по цената на единица:\n\n\\text{profit (sale)} = 30x_{jackets} + 40x_{hats} + 20x_{gloves} + 10x_{pants}\n\nРазходите за неустойки се определят от разликата между поръчките и произведените продукти:\n\n\\begin{align}\nx_{jackets} + s_{jackets} = 800 \\\\\nx_{hats} + s_{hats} = 750 \\\\\nx_{gloves} + s_{gloves} = 600 \\\\\nx_{pants} + s_{pants} = 600\n\\end{align}\n\nкъдето s_{jackets}, s_{hats}, s_{gloves} и s_{pants} са разликите между произведени и поръчани продукти. Общата неустойка е равна на сбора от неустойките за всеки продукт:\n\n\\text{penalty} = 15s_{jackets} + 20s_{hats} + 10s_{gloves} + 8s_{pants}\n\nВ задачата има още и ограничения за капацитета на отделенията:\n\n0.3 x_{jackets} + 0.3 x_{hats} + 0.25 x_{gloves} + 0.15 x_{pants} \\leq 1000 \\\\\n0.25 x_{jackets} + 0.35 x_{hats} + 0.3 x_{gloves} + 0.10 x_{pants} \\leq 1000 \\\\\n0.45 x_{jackets} + 0.5 x_{hats} + 0.4 x_{gloves} + 0.22 x_{pants} \\leq 1000 \\\\\n0.12 x_{jackets} + 0.15 x_{hats} + 0.1 x_{gloves} + 0.05 x_{pants} \\leq 1000\n\nНакрая има и ограничения за неотрицателност на променливите:\n\n\\begin{align*}\nx_{jackets}, x_{hats}, x_{gloves}, x_{pants} \\geq 0 \\\\\ns_{jackets}, s_{hats}, s_{gloves}, s_{pants} \\geq 0\n\\end{align*}\n\n\n\n\n\n\nПокажи\n# Create a new model\nm = gp.Model(\"Production and Penalty\")\nm.Params.LogToConsole = 0\n\n# Create variables\njackets = m.addVar(name=\"Jackets\")\nhats = m.addVar(name=\"Hats\")\ngloves = m.addVar(name=\"Gloves\")\npants = m.addVar(name=\"Pants\")\n\n# Set objective\n\nprofit_sales = 30 * jackets + 40 * hats + 20 * gloves + 10 * pants\n\n# The deficit of jackets, hats, gloves and pants\n\njackets_deficit = 800 - jackets\nhats_deficit = 750 - hats\ngloves_deficit = 600 - gloves\npants_deficit = 600 - pants\n\npenalty = 15 * jackets_deficit + 20 * hats_deficit + 10 * gloves_deficit + 8 * pants_deficit\n\nm.setObjective(profit_sales - penalty, GRB.MAXIMIZE)\n\n# Constraints\n\n# The production of jackets, hats, gloves and pants\n\nm.addConstr(0.3 * jackets + 0.3 * hats + 0.25 * gloves + 0.15 * pants &lt;= 1000, \"Cutting\")\nm.addConstr(0.25 * jackets + 0.35 * hats + 0.3 * gloves + 0.1 * pants &lt;= 1000, \"Sewing\")\nm.addConstr(0.45 * jackets + 0.5 * hats + 0.4 * gloves + 0.22 * pants &lt;= 1000, \"Sealing\")\nm.addConstr(0.12 * jackets + 0.15 * hats + 0.1 * gloves + 0.05 * pants &lt;= 1000, \"Packaging\")\n\nm.optimize()\n\nvar_df = pd.DataFrame(columns=['Variable', 'Value', 'RC'], data=[(v.VarName, v.X, v.RC) for v in m.getVars()])\nconstr_df = pd.DataFrame(columns=['Constraint', 'Shadow Price', 'Lower', 'Upper'],\n                         data=[(c.ConstrName, c.Pi, c.SARHSLow, c.SARHSUp) for c in m.getConstrs()])\n\n\n\n\n\nПокажи\nvar_df\n\n\n\n\nТаблица 9.5: Стойности на променливите в оптимума за производство и неустойки\n\n\n\n\n\n\n\n\n\n\nVariable\nValue\nRC\n\n\n\n\n0\nJackets\n0.0\n-9.0\n\n\n1\nHats\n2000.0\n0.0\n\n\n2\nGloves\n0.0\n-18.0\n\n\n3\nPants\n0.0\n-8.4\n\n\n\n\n\n\n\n\n\n\n\n\nПокажи\nconstr_df\n\n\n\n\nТаблица 9.6: Ограничения за производство и неустойки в оптимума за производство и неустойки\n\n\n\n\n\n\n\n\n\n\nConstraint\nShadow Price\nLower\nUpper\n\n\n\n\n0\nCutting\n0.0\n600.0\ninf\n\n\n1\nSewing\n0.0\n700.0\ninf\n\n\n2\nSealing\n120.0\n0.0\n1428.571429\n\n\n3\nPackaging\n0.0\n300.0\ninf",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Задачи</span>"
    ]
  },
  {
    "objectID": "00-Assignments/assignments.html#производство-и-склад",
    "href": "00-Assignments/assignments.html#производство-и-склад",
    "title": "9  Задачи",
    "section": "9.4 Производство и склад",
    "text": "9.4 Производство и склад\nКомпания за производство на дограма има договор за доставка на дървени дограми за следващите 6 месеца. За същия период компанията очаква разходите за производство (труд и материали) да варират. Компанията може да се възползва от по-ниски производствени разходи в даден период и да произведе повече дограми от необходимото, като разходите за складиране на продуктите са 8 лв. на месец на брой. В момента на планиране фирмата няма готови дограми на склад. В края на периода за планиране компанията изисква да няма дограми на склад.\n\n\n\n\n\n\n\n\n\n\n\n\n\nЯнуари\nФевруари\nМарт\nАприл\nМай\nЮни\n\n\n\n\nПоръчки (брой)\n100\n250\n190\n140\n220\n110\n\n\nПроизводствени разходи (лв./брой)\n50\n45\n55\n48\n52\n50\n\n\n\nФормулирайте оптимизационна задача, която да намери оптималния производствен план.\n\n\n\n\n\n\nМатематически модел\n\n\n\n\n\n\n\\begin{align*}\nx_{jan} & : \\text{брой дограми произведени през януари} \\\\\nx_{feb} & : \\text{брой дограми произведени през февруари} \\\\\nx_{mar} & : \\text{брой дограми произведени през март} \\\\\nx_{apr} & : \\text{брой дограми произведени през април} \\\\\nx_{may} & : \\text{брой дограми произведени през май} \\\\\nx_{jun} & : \\text{брой дограми произведени през юни} \\\\\n\\end{align*}\n\n\n\\begin{align*}\ny_{jan} & : \\text{брой дограми на склад в края на януари} \\\\\ny_{feb} & : \\text{брой дограми на склад в края на февруари} \\\\\ny_{mar} & : \\text{брой дограми на склад в края на март} \\\\\ny_{apr} & : \\text{брой дограми на склад в края на април} \\\\\ny_{may} & : \\text{брой дограми на склад в края на май} \\\\\ny_{jun} & : \\text{брой дограми на склад в края на юни}\n\\end{align*}\n\nОбщите производствени разходи са равни на сбора от произведените дограми умножен по цената на единица:\n\n\\text{production cost} = 50x_{jan} + 45x_{feb} + 55x_{mar} + 48x_{apr} + 52x_{may} + 50x_{jun}\n\nРазходите за складиране са равни на сбора от дограмите на склад умножен по цената на единица:\n\n\\text{storage cost} = 8y_{jan} + 8y_{feb} + 8y_{mar} + 8y_{apr} + 8y_{may} + 8y_{jun}\n\nЗа всеки период моделът трябва да гарантира, че броят произведени дограми е равен на продадените и разликата в складираните дограми.\n\n\\begin{align*}\nx_{jan} + (0  - y_{jan}) & = 100 \\\\\nx_{feb} + (y_{jan} - y_{feb}) & = 250 \\\\\nx_{mar} + (y_{feb} - y_{mar}) & = 190 \\\\\nx_{apr} + (y_{mar} - y_{apr}) & = 140 \\\\\nx_{may} + (y_{apr} - y_{may}) & = 220 \\\\\nx_{jun} + (y_{may} - 0) & = 110\n\\end{align*}\n\nНакрая има и ограничения за неотрицателност на променливите:\n\n\\begin{align*}\nx_{jan}, x_{feb}, x_{mar}, x_{apr}, x_{may}, x_{jun} & \\geq 0 \\\\\ny_{jan}, y_{feb}, y_{mar}, y_{apr}, y_{may}, y_{jun} & \\geq 0\n\\end{align*}\n\n\n\n\n\n\nПокажи\n# Create a new model\nm = gp.Model(\"Production and Storage\")\nm.Params.LogToConsole = 0\n\n# Create variables\n\nx_jan = m.addVar(vtype=GRB.CONTINUOUS, name=\"Production in January\")\nx_feb = m.addVar(vtype=GRB.CONTINUOUS, name=\"Production in February\")\nx_mar = m.addVar(vtype=GRB.CONTINUOUS, name=\"Production in March\")\nx_apr = m.addVar(vtype=GRB.CONTINUOUS, name=\"Production in April\")\nx_may = m.addVar(vtype=GRB.CONTINUOUS, name=\"Production in May\")\nx_jun = m.addVar(vtype=GRB.CONTINUOUS, name=\"Production in June\")\n\ny_jan = m.addVar(vtype=GRB.CONTINUOUS, name=\"Storage in January\")\ny_feb = m.addVar(vtype=GRB.CONTINUOUS, name=\"Storage in February\")\ny_mar = m.addVar(vtype=GRB.CONTINUOUS, name=\"Storage in March\")\ny_apr = m.addVar(vtype=GRB.CONTINUOUS, name=\"Storage in April\")\ny_may = m.addVar(vtype=GRB.CONTINUOUS, name=\"Storage in May\")\ny_jun = m.addVar(vtype=GRB.CONTINUOUS, name=\"Storage in June\")\n\nproduction_costs = 50 * x_jan + 45 * x_feb + 55 * x_mar + 48 * x_apr + 52 * x_may + 50 * x_jun\n\n# Balance of production and storage\n\nm.addConstr(x_jan + (0 - y_jan) == 100, \"Balance of production and storage in February\")\nm.addConstr(x_feb + y_jan - y_feb == 250, \"Balance of production and storage in March\")\nm.addConstr(x_mar + y_feb - y_mar == 190, \"Balance of production and storage in April\")\nm.addConstr(x_apr + y_mar - y_apr == 140, \"Balance of production and storage in May\")\nm.addConstr(x_may + y_apr - y_may == 220, \"Balance of production and storage in June\")\nm.addConstr(x_jun + y_may - 0 == 110, \"Balance of production and storage in July\")\n\nm.optimize()\n\nvar_df = pd.DataFrame(columns=['Variable', 'Value', 'RC'], data=[(v.VarName, v.X, v.RC) for v in m.getVars()])\nconstr_df = pd.DataFrame(columns=['Constraint', 'Shadow Price', 'Lower', 'Upper'],\n                         data=[(c.ConstrName, c.Pi, c.SARHSLow, c.SARHSUp) for c in m.getConstrs()])\n\n\n\n\nПокажи\nvar_df\n\n\n\n\nТаблица 9.7: Стойности на променливите в оптимума за производство и склад\n\n\n\n\n\n\n\n\n\n\nVariable\nValue\nRC\n\n\n\n\n0\nProduction in January\n100.0\n0.0\n\n\n1\nProduction in February\n250.0\n0.0\n\n\n2\nProduction in March\n190.0\n0.0\n\n\n3\nProduction in April\n470.0\n0.0\n\n\n4\nProduction in May\n0.0\n0.0\n\n\n5\nProduction in June\n0.0\n0.0\n\n\n6\nStorage in January\n0.0\n0.0\n\n\n7\nStorage in February\n0.0\n0.0\n\n\n8\nStorage in March\n0.0\n0.0\n\n\n9\nStorage in April\n330.0\n0.0\n\n\n10\nStorage in May\n110.0\n0.0\n\n\n11\nStorage in June\n0.0\n0.0\n\n\n\n\n\n\n\n\n\n\n\n\nПокажи\nconstr_df\n\n\n\n\nТаблица 9.8: Ограничения за производство и склад в оптимума за производство и склад\n\n\n\n\n\n\n\n\n\n\nConstraint\nShadow Price\nLower\nUpper\n\n\n\n\n0\nBalance of production and storage in February\n0.0\n0.0\ninf\n\n\n1\nBalance of production and storage in March\n-0.0\n0.0\ninf\n\n\n2\nBalance of production and storage in April\n-0.0\n0.0\ninf\n\n\n3\nBalance of production and storage in May\n-0.0\n-330.0\ninf\n\n\n4\nBalance of production and storage in June\n-0.0\n-110.0\ninf\n\n\n5\nBalance of production and storage in July\n-0.0\n0.0\ninf",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Задачи</span>"
    ]
  },
  {
    "objectID": "00-Assignments/assignments.html#производство-и-персонал-1",
    "href": "00-Assignments/assignments.html#производство-и-персонал-1",
    "title": "9  Задачи",
    "section": "9.5 Производство и персонал (1)",
    "text": "9.5 Производство и персонал (1)\nКомпания за производство на дограма има договор за доставка на дървени дограми за следващата година. Компанията разполага с 10 опитни сътрудника, назначени на трудови договори. Всеки от тях произвежда по 12 дограми на тримесечие. Компанията може да отговори на флуктуациите в търсенето на своите продукти, като назначава и уволнява сътрудници на срочни договори. Временно заетите произвеждат по 3 дограми на месец. Разходите за назначаване/освобождаване на временни сътрудници са съответно 200 лв. и 400 лв. за тримесечие. Компанията може да складира непродадени единици на цена 50 лв. на месец на единица.\n\n\n\n\n\n\n\n\n\n\n\nЯнуари-Март\nАприл-Юни\nЮли-Септември\nОктомври-Декември\n\n\n\n\nПоръчки (брой)\n520\n720\n520\n620\n\n\n\nФормулирайте оптимизационна задача, която да намери оптималния план за назначаване/уволняване на временно заетите работници.\n\n\n\n\n\n\nМатематически модел\n\n\n\n\n\n\n\\begin{align*}\nx_{i} \\geq 0 & : \\text{брой временни работници през период след освобождаване/наемане } i \\\\\nS_{i} & : \\text{брой наети/освободени работници в началото на период (неограничена) } i \\\\\nI_{i} \\geq 0 & : \\text{брой единици на склад в края на период } i \\\\\n\\end{align*}\n\nОграничения\n\n\\begin{align*}\n10 x_1 = 400 + I_1 \\quad \\text{Март} \\\\\nI_1 + 10 x_2 = 600 + I_2 \\quad \\text{Юни} \\\\\nI_2 + 10 x_3 = 400 + I_3 \\quad \\text{Септември} \\\\\nI_3 + 10 x_4 = 500 \\quad \\text{Декември} \\\\\n\\end{align*}\n\nБрой работници\n\n\\begin{align*}\nx_1 = S_1 \\\\\nx_2 = x_1 + S_2 \\\\\nx_3 = x_2 + S_3 \\\\\nx_4 = x_3 + S_4 \\\\\n\\end{align*}\n\nЦелева функция\n\n\\text{Разходи за склад} = 50(I_1 + I_2 + I_3 + I_4)\n\nЗа разходите за назначаване и освобождаване на временни сътрудници трябва да разделим нетния брой на временните работници на назначени (S^{+}_i) и освободени работници (S^{-}_i):\n\nS_i = S^{+}_i - S^{-}_i\n\n\n\\text{Разходи за назначаване/освобождаване} = 200(S^{+}_1 + S^{+}_2 + S^{+}_3 + S^{+}_4) + 400(S^{-}_1 + S^{-}_2 + S^{-}_3 + S^{-}_4)\n\nТака получаваме целевата функция:\n\n\\min 50(I_1 + I_2 + I_3 + I_4) + 200(S^{+}_1 + S^{+}_2 + S^{+}_3 + S^{+}_4) + 400(S^{-}_1 + S^{-}_2 + S^{-}_3 + S^{-}_4)",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Задачи</span>"
    ]
  },
  {
    "objectID": "00-Assignments/assignments.html#производство-и-персонал-2",
    "href": "00-Assignments/assignments.html#производство-и-персонал-2",
    "title": "9  Задачи",
    "section": "9.6 Производство и персонал (2)",
    "text": "9.6 Производство и персонал (2)\nФирма, специализирана в производство на зимни палта се опитва да посрещне търсенето на нейните стоки с възможно най-малки разходи. Всеки работник, нает в началото на сезона работи през целия сезон, произвежда 80 палта и получава 6000 лв. заплата. В началото на годината фирмата разполага с 30 работника.\nТърсенето на палта има силни сезонни колебания и фирмата има три опции, за да отговори на тези вариации:\n\nработниците могат да работят и по-продължително, но допълнителният труд се заплаща 50% по-скъпо и работниците могат да работят не повече от 20% повече от нормалното работно време.\nПроизведени в предишния период палта могат да се складират на цена от 12 лв. на сезон за всяко палто.\nФирмата може да назначава и освобождава служители. За назначаване на един нов служител цената е 500 лв. За освобождаване на служител разходите възлизат на 420 лв.\nФирмата няма начални запаси от готови палта.\n\nМаркетинговият отдел на предприятието оценява, че през следващите четири сезона търсенето ще възлиза на съответно 5000, 2000, 500 и 1500 палта.\nИзгответе математически модел с който да намерите оптималния план (в смисъл на най-ниски разходи) за тази фирма.\n\n\n\n\n\n\nМатематически модел\n\n\n\n\n\n\\begin{align*}\n& w_i: \\text{работници в сезон } i\\\\\n& x_i: \\text{произведени палта в сезон } i\\\\\n& o_i: \\text{произведени с извънреден труд палта  в сезон } i\\\\\n& h_i: \\text{брой наети сътрудници в сезон } i\\\\\n& f_i: \\text{брой освободени сътрудници в сезон } i\\\\\n& s_i: \\text{брой палта на склад сезон } i\\\\\n& d_i: \\text{брой палта продадени през сезон } i\\\\\n\\end{align*}\n\\begin{align*}\n& \\min 6000 \\sum_{i = 1}^{4} w_i + 500 \\sum_{i = 1}^{4} h_i + 420 \\sum_{i = 1}^{4} f_i + 12 \\sum_{i = 1}^{4} s_i +\n1.5\\frac{6000}{80} \\sum_{i = 1}^{4} o_i\\\\\n& w_0 = 30\\\\\n& w_i = w_{i - 1} + h_i - f_i\\\\\n& x_i = 80 w_i + o_i \\\\\n& s_0 = 0 \\\\\n& s_i = s_{i - 1} + x_i - d_i \\\\\n& o_i \\leq 0.2 \\cdot 80 w_i\n\\end{align*}",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Задачи</span>"
    ]
  },
  {
    "objectID": "00-Assignments/assignments.html#оптимизация-на-производство-рафинерия",
    "href": "00-Assignments/assignments.html#оптимизация-на-производство-рафинерия",
    "title": "9  Задачи",
    "section": "9.7 Оптимизация на производство (рафинерия)",
    "text": "9.7 Оптимизация на производство (рафинерия)\nРафинерия произвежда три вида безоловен бензин, които се различават по октановото си число (ON): A: обикновен (ON \\geq 87), B: премиум (ON \\geq 89) и C: супер (ON \\geq 92). Преработката на суровия петрол обхваща три компонента.\n\nВ първият компонент суровият петрол се дестилира до петролна суровина (feedstock) с октаново число ON = 82. За производството на един барел суровина са нужни 5 барела суров петрол. Капацитетът на дестилационните съоръжения е 1 500 хиляди барела на ден.\nЧаст от петролната суровина се обработва допълнително в термичен крекер, който произвежда бензин с ON = 98. От един барел суровина крекерът произвежда половин барел бензин. Капацитетът на крекера е ограничен до 200 000 барела петролна суровина на ден.\nПоследният елемент в рафинерията е смесител, който комбинира бензин от крекера и петролна суровина от дестилацията. Октановото число на смеси е приблизително равно на претегленото средно на октановите числа на компонентите им. Пример: от 1 барел с ON=90 и 2 барела с ON=100 ще се получат три барела смес с октаново число (1\\times 90 + 2 \\times 100) / 3 \\approx 96.6\nТърсенето на трите вида бензин е ограничено до съответно 50, 30, и 40 хиляди барела на ден.\nРафинерията оценява печалбата от барел бензин на съответно 6, 7 и 8 долара за трите вида бензин, които продава.\n\nСъставете математически модел, на базата на който да препоръчате оптимален (най-висока печалба) производствен план на рафинерията.\nВиж Фигура 9.1 за производствената схема на рафинерията.\n\n\n\n\n\n\nflowchart LR\n    A[Дестилация 5:1] --&gt;|ON=82| B[Крекер 2:1]\n    A --&gt; |ON=82| C\n    B --&gt;|ON=98| C[Смесител 1:1]\n    C --&gt; D(ON=87)\n    C --&gt; E(ON=89)\n    C --&gt; F(ON=92)\n\n\n\n\nФигура 9.1: Производствена схема на рафинерията\n\n\n\n\n\n\n\n\n\n\n\nМатематически модел\n\n\n\n\n\nИндекси и множества\n\n\\begin{align*}\ni \\in I & = \\{A, B, C\\} \\quad \\text{Видове бензин} \\\\\nj \\in J & = \\{Дестилация, Крекер\\} \\quad \\text{Компоненти} \\\\\n\\end{align*}\n\nПараметри\n\n\\begin{align*}\nON_{i} \\quad \\text{Минимално октаново число на бензин } i \\\\\nONC_{j} \\quad \\text{Октаново число на компонент } j \\\\\nC_{j}: \\text{Капацитет на компонент } j \\\\\nc_{j}: \\text{Коефициент на преработка в компонент } j \\\\\nD_{i}: \\text{Дневно търсене на бензин } i \\\\\nP_{i}: \\text{Цена на барел бензин } i \\\\\n\\end{align*}\n\nПроменливи\n\n\\begin{align*}\nx_{ij} & : \\text{количество компонент } j \\text{ в бензин } i \\\\\n\\end{align*}\n\nЦелева функция в долари\n\n\\max \\sum_{i \\in I} P_{i} \\sum_{j \\in J} x_{ij}\n\nОграничения\n\n\\begin{align*}\n\\sum_{j \\in J} x_{ij} \\leq D_{i} \\quad \\forall i \\in I \\quad \\text{Максимално търсене на видовете бензин}\\\\\n\\sum_{j \\in J} ONC_{j} x_{ij} \\geq ON_{i} \\sum_{j \\in J} x_{ij} \\quad \\forall i \\in I \\quad \\text{Октанови числа на бензините}\\\\\n\\end{align*}\n\nКапацитет на крекера\n\nc_{Крекер} \\sum_{i \\in I} x_{i, Крекер} \\leq C_{Крекер}\n\nКапацитет на дестилацията\n\n\\sum_{i \\in I} c_{Дестилация}x_{i, Дестилация} + c_{Дестилация} * c_{Крекер} \\sum_{i \\in I} x_{i, Крекер} \\leq C_{Дестилация}\n\n\n\n\n\n\nПокажи\nimport gurobipy as gp\nfrom gurobipy import GRB\n\n# Create a new model\nm = gp.Model(\"Oil Refinery\")\nm.Params.LogToConsole = 0\n\n# Create variables\n\ns1_dist = m.addVar(vtype=GRB.CONTINUOUS, name=\"S1 Distillation\")\ns2_dist = m.addVar(vtype=GRB.CONTINUOUS, name=\"S2 Distillation\")\ns3_dist = m.addVar(vtype=GRB.CONTINUOUS, name=\"S3 Distillation\")\n\ns1_crack = m.addVar(vtype=GRB.CONTINUOUS, name=\"S1 Cracking\")\ns2_crack = m.addVar(vtype=GRB.CONTINUOUS, name=\"S2 Cracking\")\ns3_crack = m.addVar(vtype=GRB.CONTINUOUS, name=\"S3 Cracking\")\n\n# Set objective\nm.setObjective(6.7 * (s1_dist + s1_crack) + 7.2 * (s2_dist + s2_crack) + 8.1 * (s3_dist + s3_crack), GRB.MAXIMIZE)\n\n# Constraints\n\n## Octane numbers of products\n\nm.addConstr(82 * s1_dist + 98 * s1_crack &gt;= 87 * (s1_dist + s1_crack), \"ON of gasoline 1\")\nm.addConstr(82 * s2_dist + 98 * s2_crack &gt;= 89 * (s2_dist + s2_crack), \"ON of gasoline 2\")\nm.addConstr(82 * s3_dist + 98 * s3_crack &gt;= 93 * (s3_dist + s3_crack), \"ON of gasoline 3\")\n\n## Input capacities\n\nm.addConstr(2 * (s1_crack + s2_crack + s3_crack) &lt;= 200e3, \"Cracker\")\nm.addConstr(5 * (s1_dist + s2_dist + s3_dist) + 5 * 2 * (s1_crack + s2_crack + s3_crack) &lt;= 1.5e6, \"Distillation\")\n\n# Demand constraints\n\nm.addConstr(s1_dist + s1_crack &lt;= 50e3, \"Demand of gasoline 1\")\nm.addConstr(s2_dist + s2_crack &lt;= 30e3, \"Demand of gasoline 2\")\nm.addConstr(s3_dist + s3_crack &lt;= 40e3, \"Demand of gasoline 3\")\n\nm.optimize()\n\nvars_df = pd.DataFrame(columns=['Variable', 'Value', 'RC'], data=[(v.VarName, v.X, v.RC) for v in m.getVars()])\nconstr_df = pd.DataFrame(columns=['Constraint', 'Shadow Price', 'Lower', 'Upper'],\n                         data=[(c.ConstrName, c.Pi, c.SARHSLow, c.SARHSUp) for c in m.getConstrs()])\n\nprint('Model Status:', m.status)\nprint('Objective:', m.objVal)\n\n\nModel Status: 2\nObjective: 875000.0\n\n\n\n\nПокажи\nvars_df\n\n\n\n\n\n\n\n\n\nVariable\nValue\nRC\n\n\n\n\n0\nS1 Distillation\n34375.0\n0.0\n\n\n1\nS2 Distillation\n16875.0\n0.0\n\n\n2\nS3 Distillation\n12500.0\n0.0\n\n\n3\nS1 Cracking\n15625.0\n0.0\n\n\n4\nS2 Cracking\n13125.0\n0.0\n\n\n5\nS3 Cracking\n27500.0\n0.0\n\n\n\n\n\n\n\n\n\nПокажи\nconstr_df\n\n\n\n\n\n\n\n\n\nConstraint\nShadow Price\nLower\nUpper\n\n\n\n\n0\nON of gasoline 1\n-0.0\n-250000.0\n5.500000e+05\n\n\n1\nON of gasoline 2\n-0.0\n-210000.0\n2.700000e+05\n\n\n2\nON of gasoline 3\n-0.0\n-440000.0\n2.000000e+05\n\n\n3\nCracker\n0.0\n112500.0\ninf\n\n\n4\nDistillation\n0.0\n881250.0\ninf\n\n\n5\nDemand of gasoline 1\n6.7\n0.0\n1.442857e+05\n\n\n6\nDemand of gasoline 2\n7.2\n0.0\n1.160870e+05\n\n\n7\nDemand of gasoline 3\n8.1\n0.0\n1.036364e+05",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Задачи</span>"
    ]
  },
  {
    "objectID": "00-Assignments/assignments.html#планиране-на-работни-смени",
    "href": "00-Assignments/assignments.html#планиране-на-работни-смени",
    "title": "9  Задачи",
    "section": "9.8 Планиране на работни смени",
    "text": "9.8 Планиране на работни смени\nДа си представим, че община София разработва разписанието на нова автобусна линия. Изследване на търсенето по маршрута на тази линия показва колко автобуси трябва да обслужват линията в 6 часови диапазона (Фигура 9.2). Всеки автобус може да започне смяна в 00:01, 04:01, 08:01, 12:01, 16:01 или в 20:01 обслужва линията в продължение на 8 часа. Намерете най-малкия брой автобуси, които са нужни за обслужването на линията.\n\n\nПокажи\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create DataFrame\nschedule_df = pd.DataFrame({\n    'shift': [\"00:01\", \"04:01\", \"08:01\", \"12:01\", \"16:01\", \"20:01\", \"00:00\"],\n    'demand': [4, 8, 10, 7, 12, 4, 4]\n})\n\n# Plot\nplt.step(schedule_df['shift'], schedule_df['demand'], where='post')\nplt.ylim(0, 15)\nplt.xlabel('Час')\nplt.ylabel('Брой автобуси')\nfor i, txt in enumerate(schedule_df['demand']):\n    if i == len(schedule_df) - 1:\n        continue\n\n    plt.annotate(txt, (schedule_df['shift'][i], schedule_df['demand'][i]), textcoords=\"offset points\", xytext=(25, 5),\n                 ha='center')\nplt.show()\n\n\n\n\n\n\n\n\nФигура 9.2: График на натоварване на автобусите през деня\n\n\n\n\n\n\n\n\n\n\n\nМатематически модел\n\n\n\n\n\nПроменливи:\n\nx_{00}: \\text{брой автобуси, които започват смяна в 00:01} \\\\\nx_{04}: \\text{брой автобуси, които започват смяна в 04:01} \\\\\nx_{08}: \\text{брой автобуси, които започват смяна в 08:01} \\\\\nx_{12}: \\text{брой автобуси, които започват смяна в 12:01} \\\\\nx_{16}: \\text{брой автобуси, които започват смяна в 16:01} \\\\\nx_{20}: \\text{брой автобуси, които започват смяна в 20:01}\n\nЦелта на задачата е да намери минималния брой автобуси, които са необходими за обслужването на линията, т.е. сборът от всички автобуси, които са необходими за обслужването на линията, трябва да бъде минимален:\n\n\\min x_{00} + x_{04} + x_{08} + x_{12} + x_{16} + x_{20}\n\nОграничения:\n\nМежду 00:01 и 04:00 са необходими поне 4 автобуса. В този интервал ще се движат автобусите, които започват смяна в 00:01 и 20:01 на предишния ден, тъй като смените продължават 8 часа.\n\n\nx_{20} + x_{00} \\geq 4\n\n\nМежду 04:01 и 08:00 са необходими поне 8 автобуса.\n\n\nx_{00} + x_{04} \\geq 8\n\n\nМежду 08:01 и 12:00 са необходими поне 10 автобуса.\n\n\nx_{04} + x_{08} \\geq 10\n\n\nМежду 12:01 и 16:00 са необходими поне 7 автобуса.\n\n\nx_{08} + x_{12} \\geq 7\n\n\nМежду 16:01 и 20:00 са необходими поне 12 автобуса.\n\n\nx_{12} + x_{16} \\geq 12\n\n\nМежду 20:01 и 00:00 са необходими поне 4 автобуса.\n\n\nx_{16} + x_{20} \\geq 4\n\n\n\n\n\n\nПокажи\n# Drop the last row as it is the same as the first one\nsdf = schedule_df[:-1]\n\nsdf.set_index('shift', inplace=True)\nsdf\n\nm = gp.Model(\"Bus Schedule\")\n# m.Params.LogToConsole = 0\n\n# Create variables\n\nshifts = m.addVars(sdf.index, name=\"Shifts\", vtype=GRB.INTEGER)\n\n# Set objective\n\nm.setObjective(shifts.sum(), GRB.MINIMIZE)\n\n# Set constraints\n\nm.addConstrs(\n    (\n        shifts[idx] + shifts[sdf.index[i - 1]] &gt;= sdf.loc[idx, \"demand\"] for i, idx in enumerate(sdf.index)\n    ),\n    name=\"Demand\"\n)\n\nm.optimize()\n\nm.write(\"bus_schedule.lp\")\nvars_df = pd.DataFrame(columns=['Variable', 'Value'], data=[(v.VarName, v.X) for v in m.getVars()])\n\n\nGurobi Optimizer version 11.0.0 build v11.0.0rc2 (linux64 - \"Ubuntu 20.04.6 LTS\")\n\nCPU model: 12th Gen Intel(R) Core(TM) i5-1235U, instruction set [SSE2|AVX|AVX2]\nThread count: 12 physical cores, 12 logical processors, using up to 12 threads\n\nOptimize a model with 6 rows, 6 columns and 12 nonzeros\nModel fingerprint: 0x65e7efa4\nVariable types: 0 continuous, 6 integer (0 binary)\nCoefficient statistics:\n  Matrix range     [1e+00, 1e+00]\n  Objective range  [1e+00, 1e+00]\n  Bounds range     [0e+00, 0e+00]\n  RHS range        [4e+00, 1e+01]\nFound heuristic solution: objective 26.0000000\nPresolve time: 0.00s\nPresolved: 6 rows, 6 columns, 12 nonzeros\nVariable types: 0 continuous, 6 integer (0 binary)\n\nRoot relaxation: cutoff, 3 iterations, 0.00 seconds (0.00 work units)\n\n    Nodes    |    Current Node    |     Objective Bounds      |     Work\n Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n\n     0     0     cutoff    0        26.00000   26.00000  0.00%     -    0s\n\nExplored 1 nodes (3 simplex iterations) in 0.01 seconds (0.00 work units)\nThread count was 12 (of 12 available processors)\n\nSolution count 1: 26 \n\nOptimal solution found (tolerance 1.00e-04)\nBest objective 2.600000000000e+01, best bound 2.600000000000e+01, gap 0.0000%\nWarning: variable name \"Shifts[00:01]\" has a colon\nWarning: constraint name \"Demand[0,00:01]\" has a colon\nWarning: to let Gurobi read it back, use rlp format\n\n\n\n\nПокажи\nvars_df\n\n\n\n\n\n\n\n\n\nVariable\nValue\n\n\n\n\n0\nShifts[00:01]\n0.0\n\n\n1\nShifts[04:01]\n8.0\n\n\n2\nShifts[08:01]\n2.0\n\n\n3\nShifts[12:01]\n5.0\n\n\n4\nShifts[16:01]\n7.0\n\n\n5\nShifts[20:01]\n4.0",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Задачи</span>"
    ]
  },
  {
    "objectID": "00-Assignments/assignments.html#планиране-на-производство",
    "href": "00-Assignments/assignments.html#планиране-на-производство",
    "title": "9  Задачи",
    "section": "9.9 Планиране на производство",
    "text": "9.9 Планиране на производство\nКомпания произвежда три вида зърнени закуски: A, B и C. Закуските се произвеждат от четири съставки: овесени ядки, стафиди, настъргани кокосови орехи и нарязани бадеми.\n\nПродукт А е смес от овесени ядки, стафиди и бадеми в съотношение 50:5:2.\nПродукт B е смес от овесени ядки, кокосови орехи и бадеми в съотношение 60:2:3.\nВ продукт C са смесени овесени ядки, стафиди, кокосови орехи и бадеми в пропорция 60:3:4:2.\nКомпанията продава продуктите за съответно 2.00 лв., 2.50 лв. и 3.00 лв. за кутия от 5 кг.\nКомпанията трябва да задоволи минимално дневно търсене на A, B и C от 500, 600 и 400 кутии.\nКомпанията купува съставките за 100 лв./тон (овесени ядки), 120 лв./тон (стафиди), 110 лв./тон (кокосови орехи) и 200 лв./тон (бадеми).\nДоставките са ограничени до 5 тона на ден (овесени ядки), 2 тона (стафиди) и по един тон на ден за останалите две съставки (кокосови орехи, бадеми).\n\nСъставете математически модел с който да препоръчате оптимален производствен план за тази компания. Целта на модела е да намери производствен план с най-висока стойност на печалбата на компанията.\n\n\n\n\n\n\nМатематически модел\n\n\n\n\n\nКъм задачата можем да подходим по поне два начина в зависимост от избора на променливи.\nИ при двата подхода искаме да намерим максимума на печалбата, която е разликата от приходите, реализирани от продажба да продуктите и разходите за суровини (овесени ядки, стафиди и т.н.).\n\nНека x_A, x_B, x_C са произведените количества от продуктите A, B и C в кг. Тогава целевата функция.\n\nОт описанието на съставките на трите продукта можем да изразим пропорциите на съставките в проценти от общото количество на продукта (Таблица 9.9).\n\n\n\nТаблица 9.9: Състав на продуктите A, B и C\n\n\n\n\n\n\n\n\n\n\n\n\nПродукт/Съставка\nОв. ядки\nСтафиди\nКокос\nБадеми\n\n\n\n\nA\n\\frac{50}{57}\n\\frac{5}{57}\n0\n\\frac{2}{57}\n\n\nB\n\\frac{60}{65}\n0\n\\frac{2}{65}\n\\frac{3}{65}\n\n\nC\n\\frac{60}{69}\n\\frac{3}{69}\n\\frac{4}{69}\n\\frac{2}{69}\n\n\n\n\n\n\nПри производството на един килограм от продукт A са необходими \\frac{50}{57} кг. овесени ядки, \\frac{5}{57} кг. стафиди и \\frac{2}{57} кг. бадеми. При производството на един килограм от продукт B са необходими \\frac{60}{65} кг. овесени ядки, \\frac{2}{65} кг. кокосови орехи и \\frac{3}{65} кг. бадеми. При производството на един килограм от продукт C са необходими \\frac{60}{69} кг. овесени ядки, \\frac{3}{69} кг. стафиди, \\frac{4}{69} кг. кокосови орехи и \\frac{2}{69} кг. бадеми.\nНека y_{\\text{овес}}, y_{\\text{стафиди}}, y_{\\text{кокос}}, y_{\\text{бадеми}} са общо изразходваните количества на съставките в килограми.\nОт Таблица 9.9 можем да изведем използваните количества суровини при производството на x_A, x_B и x_C от продуктите.\n\n\\begin{align*}\ny_{\\text{овес}} & = \\frac{50}{57} x_{A} + \\frac{60}{65} x_{B} + \\frac{60}{69} x_{C} \\\\\ny_{\\text{стафиди}} & = \\frac{5}{57} x_{A} + \\frac{3}{69} x_{C} \\\\\ny_{\\text{кокос}} & = \\frac{2}{65} x_{B} + \\frac{4}{69} x_{C} \\\\\ny_{\\text{бадеми}} & = \\frac{2}{57} x_{A} + \\frac{3}{65} x_{B} + \\frac{2}{69} x_{C}\n\\end{align*}\n\nОбщите разходи за суровини са:\n\nРазходи = (100 y_{\\text{овес}} + 120 y_{\\text{стафиди}} + 110 y_{\\text{кокос}} + 200 y_{\\text{бадеми}}) / 1000\n\nПриходите от продажбата на продуктите са:\n\n(2.0 \\cdot 500 x_{A} + 2.5 \\cdot 500 x_{B} + 3.0 \\cdot 500 x_{C}) / 5\n\nПечалбата (целевата функция в задачата) от продажбата на A, B и C е разликата между приходите от продажбата и разходите за производство.\n\nz = \\text{Приходи} - \\text{Разходи}\n\nВ задачата има две групи ограничения:\n\nОграничения за минимални доставки\n\n\n\\begin{align*}\nx_{A} \\geq 500 \\cdot 2 \\text{ (минимално производство на A в кг.)} \\\\\nx_{B} \\geq 600 \\cdot 2  \\text{ (минимално производство на B в кг.)} \\\\\nx_{C} \\geq 400 \\cdot 2 \\text{ (минимално производство на C в кг.)}\n\\end{align*}\n\n\nОграничения за наличност на суровини\n\n\n\\begin{align*}\ny_{\\text{овес}} & \\leq 5 \\cdot 1000 \\text{ (овесени ядки в кг.)}\\\\\ny_{\\text{стафиди}} & \\leq 2 \\cdot 1000 \\text{ (стафиди в кг.)}\\\\\ny_{\\text{кокос}} & \\leq 1 \\cdot 1000 \\text{ (кокосови орехи в кг.)}\\\\\n\\end{align*}\n\n\n\n\n\n\n\n\n\n\nМатематически модел (втори подход)\n\n\n\n\n\nВъзможен е и друг подход към задачата, който използва променливи за съставките на продуктите и изразява количествата произведени чрез тях.\nНека x_{Aо}, x_{Aс}, x_{Aк}, x_{Aб}, x_{Bо}, x_{Bк}, x_{Bб}, x_{Cо}, x_{Cс}, x_{Cк}, x_{Cб} са количествата на съставките в килограми, които са използвани за производството на продуктите A, B и C.\n\n\\begin{align*}\n& x_{Aо}: \\text{овесени ядки в продукт A, кг.} \\\\\n& x_{Aс}: \\text{стафиди в продукт A, кг.} \\\\\n& x_{Aк}: \\text{кокосови орехи в продукт A, кг.} \\\\\n& x_{Aб}: \\text{бадеми в продукт A, кг.} \\\\\n& x_{Bо}: \\text{овесени ядки в продукт B, кг.} \\\\\n& x_{Bк}: \\text{кокосови орехи в продукт B, кг.} \\\\\n& x_{Bб}: \\text{бадеми в продукт B, кг.} \\\\\n& x_{Cо}: \\text{овесени ядки в продукт C, кг.} \\\\\n& x_{Cс}: \\text{стафиди в продукт C, кг.} \\\\\n& x_{Cк}: \\text{кокосови орехи в продукт C, кг.} \\\\\n& x_{Cб}: \\text{бадеми в продукт C, кг.} \\\\\n\\end{align*}\n\n\n\\begin{align*}\nx_A & = x_{Aо} + x_{Aс} + x_{Aк} + x_{Aб} \\\\\nx_B & = x_{Bо} + x_{Bк} + x_{Bб} \\\\\nx_C & = x_{Cо} + x_{Cс} + x_{Cк} + x_{Cб}\n\\end{align*}\n\n\n\\begin{align*}\ny_{\\text{oвес}} = x_{Aо} + x_{Bо} + x_{Cо} \\\\\ny_{\\text{стафиди}} = x_{Aс} + x_{Bс} + x_{Cс} \\\\\ny_{\\text{кокос}} = x_{Aк} + x_{Bк} + x_{Cк} \\\\\ny_{\\text{бадеми}} = x_{Aб} + x_{Bб} + x_{Cб}\n\\end{align*}\n\nЦелевата функция е същата както и в предишния подход.\nРазличават се ограниченията за състава на продуктите.\n\n\\begin{align*}\nx_{Ao} = (50/5) x_{Aс} \\\\\nx_{Ao} = (50/2) x_{Aб} \\\\\nx_{Bо} = (60/2) x_{Bк} \\\\\nx_{Bо} = (60/3) x_{Bб} \\\\\nx_{Cо} = (60/3) x_{Cс} \\\\\nx_{Cо} = (60/4) x_{Cк} \\\\\nx_{Cо} = (60/2) x_{Cб} \\\\\n\\end{align*}\n\nДвата подхода се еквивалентни.\n\n\n\n\n\nПокажи\nimport gurobipy as gp\nfrom gurobipy import GRB\n\n# Create a new model\nm = gp.Model(\"Cereals\")\nm.Params.LogToConsole = 0\n\nx_A = m.addVar(lb=0, name=\"x_A\")\nx_B = m.addVar(lb=0, name=\"x_B\")\nx_C = m.addVar(lb=0, name=\"x_C\")\n\nrevenue = (2.0 * x_A + 2.5 * x_B + 3.0 * x_C) / 2.0\n\n# For the costs we define the raw materials\n\ny_oats = (50 / 57) * x_A + (60 / 65) * x_B + (60 / 69) * x_C\ny_raisins = (5 / 57) * x_A + (3 / 69) * x_C\ny_coconuts = (2 / 65) * x_B + (4 / 69) * x_C\ny_almonds = (5 / 57) * x_A + (3 / 65) * x_B + (2 / 69) * x_C\n\ncosts = (100 * y_oats + 120 * y_raisins + 110 * y_coconuts + 200 * y_almonds) / 1000\n\n# Set the objective function\nm.setObjective(revenue - costs, GRB.MAXIMIZE)\n\n# Minimum production constraints\n\nm.addConstr(x_A &gt;= 500 * 2, \"MinA\")\nm.addConstr(x_B &gt;= 600 * 2, \"MinB\")\nm.addConstr(x_C &gt;= 400 * 2, \"MinC\")\n\n# Raw materials constraints\n\nm.addConstr(y_oats &lt;= 5 * 1000, \"Oats\")\nm.addConstr(y_raisins &lt;= 2 * 1000, \"Raisins\")\nm.addConstr(y_coconuts &lt;= 1 * 1000, \"Coconuts\")\nm.addConstr(y_almonds &lt;= 1 * 1000, \"Almonds\")\n\nm.optimize()\n\nprint(\"Оптимална стойност на целевата функция: \", m.objVal)\nprint(f\"Оптимален план: продукт A = {x_A.x:5.2f} кг., продукт B = {x_B.x:5.2f} кг., продукт C = {x_C.x:5.2f} кг.\")\n\n\nОптимална стойност на целевата функция:  7097.561943319839\nОптимален план: продукт A = 1000.00 кг., продукт B = 1200.00 кг., продукт C = 3467.38 кг.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Задачи</span>"
    ]
  },
  {
    "objectID": "00-Assignments/assignments.html#радиотерапия",
    "href": "00-Assignments/assignments.html#радиотерапия",
    "title": "9  Задачи",
    "section": "9.10 Радиотерапия",
    "text": "9.10 Радиотерапия\nПри радиотерапия се използва радиация за лечение на рак. Целта на радиотерапията е да унищожи раковите клетки, като се опитва да се намали въздействието върху здравите тъкани. В този пример разглеждаме задача, в която имаме 6 лъча радиация, които се прилагат върху 9 групи тъкани. Всяка група тъкани може да облъчена от два лъча радиация (ляво и горе). Тъканите се различават по това, какво количество радиация ще получат при единица интензивност на всеки лъч. Тази информация е представена в Таблица 9.10 (и в друг формат в Таблица 9.11), например при прилагане на една едицина интензивност при лъч 1, тъкан 1,1 ще получи 1 единица радиация, докато тъкан 1,2 ще получи 2 единици радиация.\n\n\n\nТаблица 9.10: Тъкани и погълната радиация при единица интензивност на лъчите\n\n\n\n\n\n\n\n\n\n\n\n\nЛъч 4\nЛъч 5\nЛъч 6\n\n\n\n\nЛъч 1\n1/1\n2/1\n2/1\n\n\nЛъч 2\n1/2\n2/2\n2.5/2\n\n\nЛъч 3\n1.5/1\n1.5/1\n2.5/1\n\n\n\n\n\n\nЦелта е здравите тъкани (в клетки 1,1; 1,2; 2,2; 3,3) да получат възможно най-малка доза радиация, докато в същото време болните тъкани трябва да получат поне 7Gy (Грей), за да бъдат унищожени. Тъканта на гръбначния мозък (в клетка 2,2) е особено чувствителна и не трябва да бъде изложена на радиация повече от 5Gy.\n\n\n\n\n\n\nМатематически модел\n\n\n\n\n\n\n\\begin{align*}\n& \\min (x_1 + x_4) + (2x_2 + 2x_5) + (2x_1 + x_6) + (2.5x_3 + x_6) = \\\\ 3x_1 + 2x_2 + 2.5x_3 + 2x_6 \\\\\n& x_2 + 2x_4 \\geq 7\\\\\n& 1.5x_3 + x_4 \\geq 7 \\\\\n& 2x_1 + x_5 \\geq 7 \\\\\n& 1.5x_3 + x_5 \\geq 7 \\\\\n& 2.5x_2 + 2x_6 \\geq 7 \\\\\n& 2x_2 + 2x_5 \\leq 5\n\\end{align*}\n\n\n\n\n\n\nПокажи\nimport pandas as pd\n\ndt = pd.DataFrame({\n    \"Страна 1\": [1, 2, 2, 1, 2, 2.5, 1.5, 1.5, 2.5],\n    \"Страна 2\": [1, 1, 1, 2, 2, 2, 1, 1, 1],\n    \"isCancer\": [False, True, False, True, False, True, True, True, False],\n    \"isSpinal\": [False, False, False, False, True, False, False, False, False]\n}, index=pd.MultiIndex.from_product([range(1, 4), range(4, 7)]))\ndt\n\n\n\n\nТаблица 9.11: Тъкани и погълната радиация при единица интензивност на лъчите (формат 2)\n\n\n\n\n\n\n\n\n\n\n\nСтрана 1\nСтрана 2\nisCancer\nisSpinal\n\n\n\n\n1\n4\n1.0\n1\nFalse\nFalse\n\n\n5\n2.0\n1\nTrue\nFalse\n\n\n6\n2.0\n1\nFalse\nFalse\n\n\n2\n4\n1.0\n2\nTrue\nFalse\n\n\n5\n2.0\n2\nFalse\nTrue\n\n\n6\n2.5\n2\nTrue\nFalse\n\n\n3\n4\n1.5\n1\nTrue\nFalse\n\n\n5\n1.5\n1\nTrue\nFalse\n\n\n6\n2.5\n1\nFalse\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\nПокажи\n# Implementation 1\n\nm = gp.Model(\"Radiation Therapy\")\n\nx = m.addVars([1, 2, 3, 4, 5, 6], name=\"x\")\n\nm.setObjective(\n    x[1] + x[4] + 2 * x[2] + 2 * x[5] + 2 * x[1] + x[6] + 2.5 * x[3] + x[6], GRB.MINIMIZE\n)\n\nm.addConstr(\n    x[2] + 2 * x[4] &gt;= 7, \"MinimalDoseCancer1\"\n)\nm.addConstr(\n    1.5 * x[3] + x[4] &gt;= 7, \"MinimalDoseCancer2\"\n)\nm.addConstr(\n    2 * x[1] + x[5] &gt;= 7, \"MinimalDoseCancer3\"\n)\nm.addConstr(\n    1.5 * x[3] + x[5] &gt;= 7, \"MinimalDoseCancer4\"\n)\nm.addConstr(\n    2.5 * x[2] + 2 * x[6] &gt;= 7, \"MinimalDoseCancer5\"\n)\nm.addConstr(\n    2 * x[2] + 2 * x[5] &lt;= 5, \"MaximalDoseSpinal\"\n)\n\nm.optimize()\n\nvars_df = pd.DataFrame(columns=['Variable', 'Value'], data=[(v.VarName, v.X) for v in m.getVars()])\nconstr_df = pd.DataFrame(columns=['Constraint', 'Shadow Price', 'Lower', 'Upper'],\n                            data=[(c.ConstrName, c.Pi, c.SARHSLow, c.SARHSUp) for c in m.getConstrs()])\n# m.write(\"radiation_impl1.lp\")\nvars_df\n\n\nGurobi Optimizer version 11.0.0 build v11.0.0rc2 (linux64 - \"Ubuntu 20.04.6 LTS\")\n\nCPU model: 12th Gen Intel(R) Core(TM) i5-1235U, instruction set [SSE2|AVX|AVX2]\nThread count: 12 physical cores, 12 logical processors, using up to 12 threads\n\nOptimize a model with 6 rows, 6 columns and 12 nonzeros\nModel fingerprint: 0xdff0d98c\nCoefficient statistics:\n  Matrix range     [1e+00, 2e+00]\n  Objective range  [1e+00, 3e+00]\n  Bounds range     [0e+00, 0e+00]\n  RHS range        [5e+00, 7e+00]\nPresolve time: 0.01s\nPresolved: 6 rows, 6 columns, 12 nonzeros\n\nIteration    Objective       Primal Inf.    Dual Inf.      Time\n       0    0.0000000e+00   2.275000e+01   0.000000e+00      0s\n       7    2.9750000e+01   0.000000e+00   0.000000e+00      0s\n\nSolved in 7 iterations and 0.01 seconds (0.00 work units)\nOptimal objective  2.975000000e+01\n\n\n\n\n\n\n\n\n\nVariable\nValue\n\n\n\n\n0\nx[1]\n2.25\n\n\n1\nx[2]\n0.00\n\n\n2\nx[3]\n3.00\n\n\n3\nx[4]\n3.50\n\n\n4\nx[5]\n2.50\n\n\n5\nx[6]\n3.50\n\n\n\n\n\n\n\n\n\nПокажи\n# Implementation 2\n\nimport gurobipy as gp\nfrom gurobipy import GRB\n\nm = gp.Model(\"Radiation Therapy\")\n\n# Create variables\n\nidx_left = dt.index.get_level_values(0).drop_duplicates()\nidx_upper = dt.index.get_level_values(1).drop_duplicates()\n\nbeams_left = m.addVars(idx_left, name=\"beam_left\")\nbeams_upper = m.addVars(idx_upper, name=\"beam_upper\")\n\n# Set objective\n# Radiation from the upper beams\n\nrad_upper = gp.quicksum(\n    dt.loc[(i, j), \"Страна 2\"] * beams_upper[j] for i, j in dt.index[~dt[\"isCancer\"]])\n\nrad_lower = gp.quicksum(\n    dt.loc[(i, j), \"Страна 1\"] * beams_left[i] for i, j in dt.index[~dt[\"isCancer\"]])\n\nm.setObjective(rad_upper + rad_lower, GRB.MINIMIZE)\n\n# Constraints\n\nm.addConstrs(\n    (\n        dt.loc[(i, j), \"Страна 1\"] * beams_left[i] +\n        dt.loc[(i, j), \"Страна 2\"] * beams_upper[j] &gt;= 7\n        for i, j in dt.index[dt[\"isCancer\"]]\n    ),\n    name=\"MinimalDoseCancer\"\n)\n\n# Maximal dose for the spinal cord\n\nm.addConstrs(\n    (\n        dt.loc[(i, j), \"Страна 1\"] * beams_left[i] +\n        dt.loc[(i, j), \"Страна 2\"] * beams_upper[j] &lt;= 5\n        for i, j in dt.index[dt[\"isSpinal\"]]\n    ),\n    name=\"MaximalDoseSpinal\"\n)\n\nm.optimize()\n\nvars_df = pd.DataFrame(columns=['Variable', 'Value'], data=[(v.VarName, v.X) for v in m.getVars()])\nconstr_df = pd.DataFrame(columns=['Constraint', 'Shadow Price', 'Lower', 'Upper'],\n                         data=[(c.ConstrName, c.Pi, c.SARHSLow, c.SARHSUp) for c in m.getConstrs()])\n# m.write(\"radiation_impl2.lp\")\nvars_df\n\n\nGurobi Optimizer version 11.0.0 build v11.0.0rc2 (linux64 - \"Ubuntu 20.04.6 LTS\")\n\nCPU model: 12th Gen Intel(R) Core(TM) i5-1235U, instruction set [SSE2|AVX|AVX2]\nThread count: 12 physical cores, 12 logical processors, using up to 12 threads\n\nOptimize a model with 6 rows, 6 columns and 12 nonzeros\nModel fingerprint: 0x49b2e8be\nCoefficient statistics:\n  Matrix range     [1e+00, 2e+00]\n  Objective range  [1e+00, 3e+00]\n  Bounds range     [0e+00, 0e+00]\n  RHS range        [5e+00, 7e+00]\nPresolve time: 0.00s\nPresolved: 6 rows, 6 columns, 12 nonzeros\n\nIteration    Objective       Primal Inf.    Dual Inf.      Time\n       0    0.0000000e+00   2.275000e+01   0.000000e+00      0s\n       5    2.9750000e+01   0.000000e+00   0.000000e+00      0s\n\nSolved in 5 iterations and 0.00 seconds (0.00 work units)\nOptimal objective  2.975000000e+01\n\n\n\n\n\n\n\n\n\nVariable\nValue\n\n\n\n\n0\nbeam_left[1]\n2.25\n\n\n1\nbeam_left[2]\n0.00\n\n\n2\nbeam_left[3]\n3.00\n\n\n3\nbeam_upper[4]\n3.50\n\n\n4\nbeam_upper[5]\n2.50\n\n\n5\nbeam_upper[6]\n3.50",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Задачи</span>"
    ]
  },
  {
    "objectID": "Literature.html",
    "href": "Literature.html",
    "title": "Литература",
    "section": "",
    "text": "Taha (2017)\nWilliams (2013)\n\n\n\n\n\nTaha, Hamdy A. 2017. Operations Research. 10th ed. Harlow, United Kingdom: Pearson Education Limited.\n\n\nWilliams, Hilary P. 2013. Model Building in Mathematical Programming. Fifth Edition. Chichester: John Wiley & Sons Ltd.",
    "crumbs": [
      "Литература"
    ]
  },
  {
    "objectID": "izpit.html",
    "href": "izpit.html",
    "title": "10  Изпит",
    "section": "",
    "text": "10.1 Вариант 1",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Изпит</span>"
    ]
  },
  {
    "objectID": "izpit.html#вариант-1",
    "href": "izpit.html#вариант-1",
    "title": "10  Изпит",
    "section": "",
    "text": "Задача 1\nЗадача 2",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Изпит</span>"
    ]
  },
  {
    "objectID": "izpit.html#вариант-2",
    "href": "izpit.html#вариант-2",
    "title": "10  Изпит",
    "section": "10.2 Вариант 2",
    "text": "10.2 Вариант 2\n\nЗадача 1\nЗадача 2",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Изпит</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Библиография",
    "section": "",
    "text": "Taha, Hamdy A. 2017. Operations Research. 10th ed.\nHarlow, United Kingdom: Pearson Education\nLimited.\n\n\nWilliams, Hilary P. 2013. Model Building in Mathematical\nProgramming. Fifth Edition. Chichester: John\nWiley & Sons Ltd.",
    "crumbs": [
      "Библиография"
    ]
  }
]